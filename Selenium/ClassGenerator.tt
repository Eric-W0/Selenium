// Selenium Framework
// Copyright(C) 2016 Eric Blond
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.If not, see <http://www.gnu.org/licenses/>.

<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="PresentationFramework" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Windows" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="System.Collections.Generic" #>

<#
	Load(this.Host.ResolvePath("mapping.xml"));
#>

// This file was automatically generated!

using Hyperplan.Fluor;
using Hyperplan.Fluor.Library;
using Hyperplan.Selenium.Core;
using System;
using System.Windows;
using System.Reflection;
using System.Collections.Generic;

namespace Hyperplan.Selenium
{
<#
	var allTypes = from t in AppDomain.CurrentDomain.GetAssemblies()
	                                  .SelectMany(a => a.GetTypes())
                   where (typeof(FrameworkElement).IsAssignableFrom(t)
				       || typeof(FrameworkContentElement).IsAssignableFrom(t))
					  && !t.IsGenericType
					  && !t.IsNested
					  && t.IsPublic
					  && !IsTypeExcluded(t)
					  && !t.IsSealed
                   orderby t.Name
                   select t;
				   
	foreach (var type in allTypes)
	{
#>

	public class <#= type.Name #> : <#= type.FullName #>
	{
		bool initialized;
<#
		foreach (var entry in CollectAll(type))
		{
			if (!(entry is Attached))
			{
#>

		Cell<IProperty<<#= GetTypeText(entry.Type) #>>> cell<#= entry.Name #>;

		public IProperty<<#= GetTypeText(entry.Type) #>> _<#= entry.Name #>_
		{
			get
			{
				Prepare<#= entry.Name #>();
				return cell<#= entry.Name #>.Value;
			}

			set
			{
				Prepare<#= entry.Name #>();
				cell<#= entry.Name #>.Value = value;
			}
		}

		public new <#= GetTypeText(entry.Type) #> <#= entry.Name #>
		{
			get
			{
				Prepare<#= entry.Name #>();
				return _<#= entry.Name #>_.Value;
			}

			set
			{
				Prepare<#= entry.Name #>();
				_<#= entry.Name #>_.Value = value;
			}
		}

<#
			}
			if (entry is Property)
			{
				var prop = (Property)entry;
				if (prop.IsDProp)
				{
#>
		DependencyPropertyBridge<<#= type.Name #>, <#= GetTypeText(entry.Type) #>> bridge<#= entry.Name #>;
<#
				}
				else
				{
#>
		RegularPropertyBridge<<#= type.Name #>, <#= GetTypeText(entry.Type) #>> bridge<#= entry.Name #>;
<#
				}
			}
			else if (entry is Collection)
			{
				var coll = (Collection)entry;
#>
		CollectionBridge<<#= type.Name #>, <#= GetTypeText(coll.ElementType) #>> bridge<#= entry.Name #>;
<#
			}
			else if (entry is Event)
			{
				var evt = (Event)entry;
#>
        EventBridge<<#= type.Name #>, <#= GetTypeText(entry.Type) #>> bridge<#= entry.Name #>;
<#
			}
		}
	    foreach (var pair in mapping)
		{
			foreach (var entry in pair.Value)
			{
				var attached = entry as Attached;
				if ((attached != null) && (attached.IsValidTarget(type)))
				{
#>

		public <#= GetTypeText(attached.Type) #> <#= pair.Key.Name #>_<#= attached.Name #>
		{
			get
			{
				return <#= GetTypeText(pair.Key) #>.Get<#= attached.Name #>(this);
			}

			set
			{
				<#= GetTypeText(pair.Key) #>.Set<#= attached.Name #>(this, value);
			}
		}
<#
				}
			}
		}
#>

<#
		foreach (var entry in CollectAll(type))
		{
			if (!(entry is Attached))
			{
#>

		void Prepare<#= entry.Name #>()
		{
			if (bridge<#= entry.Name #> == null)
			{
<#
				if (entry is Property)
				{
					var prop = (Property)entry;
					if (prop.IsDProp)
					{
#>
				bridge<#= entry.Name #> = new DependencyPropertyBridge<<#= type.Name #>, <#= GetTypeText(entry.Type) #>>(this, "<#= entry.Name #>");
<#
					}
					else
					{
#>
				bridge<#= entry.Name #> = new RegularPropertyBridge<<#= type.Name #>, <#= GetTypeText(entry.Type) #>>(this, "<#= entry.Name #>");
<#
					}
#>
				cell<#= entry.Name #> = new Cell<IProperty<<#= GetTypeText(entry.Type) #>>>(
					new LazyCache<<#= GetTypeText(entry.Type) #>>(() =>
					{
						using (new Snapshot())
						{
							return bridge<#= entry.Name #>.InternalValue;
						}
					})
				);
<#
				}
				else if (entry is Collection)
				{
					var coll = (Collection)entry;
#>
				bridge<#= entry.Name #> = new CollectionBridge<<#= type.Name #>, <#= GetTypeText(coll.ElementType) #>>(this, "<#= entry.Name #>");				
				cell<#= entry.Name #> = new Cell<IProperty<<#= GetTypeText(entry.Type) #>>>(
					new LazyCache<<#= GetTypeText(entry.Type) #>>(() =>
					{
						using (new Snapshot())
						{
							return bridge<#= entry.Name #>.InternalValue;
						}
					})
				);
<#
				}
				else if (entry is Event)
				{
					var evt = (Event)entry;
#>
				bridge<#= entry.Name #> = new EventBridge<<#= type.Name #>, <#= GetTypeText(entry.Type) #>>(this, "<#= entry.Name #>");
				cell<#= entry.Name #> = new Cell<IProperty<<#= GetTypeText(entry.Type) #>>>(
					new Cell<<#= GetTypeText(entry.Type) #>>()
				);
<#
			}
#>
				if (initialized)
				{
					bridge<#= entry.Name #>.Activate();
				}
			}
		}
<#
			}
		}
#>

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

<#
		foreach (var entry in CollectAll(type))
		{
			if (!(entry is Attached))
			{
#>
			if (bridge<#= entry.Name #> != null)
			{
				bridge<#= entry.Name #>.Activate();
			}
<#
			}
		}
#>
			initialized = true;
		}
	}
<#
	}
#>
}

<#+
	CSharpCodeProvider provider = new CSharpCodeProvider();

	string GetTypeText(Type type)
	{
		return provider.GetTypeOutput(new CodeTypeReference(type));
	}

	interface Entry
	{
	    string Name { get; }
		Type Type { get; }
	}

	class Property : Entry
	{
	    public string Name => Info.Name;
		public Type Type => Info.PropertyType;

		public PropertyInfo Info { get; set; }

		public bool IsDProp => Info.DeclaringType.GetField($"{Info.Name}Property") != null;
	}

	class Attached : Entry
	{
		public string Name => Info.Name.Substring(3);
		public Type Type => Info.ReturnType;

		public MethodInfo Info { get; set; }

		public bool IsValidTarget(Type type)
		{
			return Info.GetParameters()[0].ParameterType.IsAssignableFrom(type);
		}
	}

	class Collection : Entry
	{
		public string Name { get; set; }
		public Type Type => typeof(IEnumerable<>).MakeGenericType(ElementType);

		public Type ElementType { get; set; }
	}

	class Event : Entry
	{
	    public string Name => Info.Name;
		public Type Type => Info.EventHandlerType;

		public EventInfo Info { get; set; }
	}

	Dictionary<Type, Entry[]> mapping;
	List<string> excluded;

	static Type GetType(string fullName)
	{
		foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
		{
			var result = assembly.GetType(fullName);
			if (result != null)
			{
				return result;
			}
		}
		return null;
	}

	void Load(string xmlPath)
	{
		var xdoc = XDocument.Load(xmlPath);

		mapping = new Dictionary<Type, Entry[]>();
		foreach (var classNode in xdoc.Descendants("class"))
		{
			var classType = GetType(classNode.Attribute("id").Value);

			var results = new List<Entry>();
			results.AddRange(from p in classNode.Elements("prop")
			                 select new Property() {
							     Info = classType.GetProperty(p.Value),
						     });
			results.AddRange(from c in classNode.Elements("coll")
			                 select new Collection() {
					             Name = c.Value,
							     ElementType = GetType(c.Attribute("elt").Value)
						     });
			results.AddRange(from e in classNode.Elements("event")
			                 select new Event() {
						         Info = classType.GetEvent(e.Value)
					         });
			results.AddRange(from a in classNode.Elements("attached")
			                 select new Attached() {
							     Info = classType.GetMethod(
								     $"Get{a.Value}",
									 System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static
							     )
							 });

			mapping.Add(classType, results.ToArray<Entry>());
		}

		excluded = new List<string>();
		foreach (var exclNode in xdoc.Descendants("excluded"))
		{
			excluded.Add(exclNode.Value);
		}
	}

	bool IsTypeExcluded(Type type)
	{
		foreach (var excl in excluded)
		{
			if (excl[excl.Length - 1] == '*')
			{
				if (type.FullName.StartsWith(excl.Substring(0, excl.Length - 1)))
				{
					return true;
				}
			}
			else
			{
				if (type.FullName.Equals(excl))
				{
					return true;
				}
			}
		}
		return false;
	}

	Entry[] CollectAll(Type type)
	{
	    var enclosingTypeName = type.Name;
		var result = new List<Entry>();
		for (; type != typeof(object); type = type.BaseType)
		{
			Entry[] entries;
			if (mapping.TryGetValue(type, out entries))
			{
				result.AddRange(from e in entries
				                where (e.Name != enclosingTypeName)
								select e);
			}
		}
		return result.OrderBy(x => x.Name).ToArray<Entry>();
	}
#>
