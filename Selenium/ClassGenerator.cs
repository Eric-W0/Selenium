// Selenium Framework
// Copyright(C) 2016 Eric Blond
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.If not, see <http://www.gnu.org/licenses/>.



// This file was automatically generated!

using Hyperplan.Fluor;
using Hyperplan.Fluor.Library;
using Hyperplan.Selenium.Core;
using System;
using System.Windows;
using System.Reflection;
using System.Collections.Generic;

namespace Hyperplan.Selenium
{

	public class AccessText : System.Windows.Controls.AccessText
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<AccessText, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<AccessText, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<AccessText, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<AccessText, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<AccessText, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<AccessText, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<AccessText, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<AccessText, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<AccessText, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<AccessText, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<AccessText, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<AccessText, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<AccessText, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<AccessText, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<AccessText, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<AccessText, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class AdornedElementPlaceholder : System.Windows.Controls.AdornedElementPlaceholder
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornedElementPlaceholder, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornedElementPlaceholder, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornedElementPlaceholder, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornedElementPlaceholder, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornedElementPlaceholder, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornedElementPlaceholder, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornedElementPlaceholder, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornedElementPlaceholder, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<AdornedElementPlaceholder, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<AdornedElementPlaceholder, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<AdornedElementPlaceholder, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<AdornedElementPlaceholder, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<AdornedElementPlaceholder, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<AdornedElementPlaceholder, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<AdornedElementPlaceholder, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<AdornedElementPlaceholder, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class AdornerDecorator : System.Windows.Documents.AdornerDecorator
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornerDecorator, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornerDecorator, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornerDecorator, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornerDecorator, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornerDecorator, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornerDecorator, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornerDecorator, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<AdornerDecorator, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<AdornerDecorator, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<AdornerDecorator, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<AdornerDecorator, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<AdornerDecorator, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<AdornerDecorator, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<AdornerDecorator, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<AdornerDecorator, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<AdornerDecorator, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Block : System.Windows.Documents.Block
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Block, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Block, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Block, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Block, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Block, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Block, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Block, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Block, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Block, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Block, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Block, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Block, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class BlockUIContainer : System.Windows.Documents.BlockUIContainer
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<BlockUIContainer, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<BlockUIContainer, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<BlockUIContainer, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<BlockUIContainer, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<BlockUIContainer, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<BlockUIContainer, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<BlockUIContainer, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<BlockUIContainer, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<BlockUIContainer, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<BlockUIContainer, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<BlockUIContainer, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<BlockUIContainer, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class Bold : System.Windows.Documents.Bold
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Bold, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Bold, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Bold, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Bold, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Bold, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Bold, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Bold, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Bold, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Bold, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Bold, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Bold, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Bold, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class Border : System.Windows.Controls.Border
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Border, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Border, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Border, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Border, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Border, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Border, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Border, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Border, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Border, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Border, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Border, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Border, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Border, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Border, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Border, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Border, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class BulletDecorator : System.Windows.Controls.Primitives.BulletDecorator
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<BulletDecorator, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<BulletDecorator, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<BulletDecorator, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<BulletDecorator, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<BulletDecorator, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<BulletDecorator, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<BulletDecorator, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<BulletDecorator, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<BulletDecorator, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<BulletDecorator, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<BulletDecorator, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<BulletDecorator, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<BulletDecorator, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<BulletDecorator, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<BulletDecorator, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<BulletDecorator, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Button : System.Windows.Controls.Button
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<Button, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Button, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Button, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<Button, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<Button, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Button, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Button, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Button, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Button, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Button, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Button, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Button, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Button, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Button, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Button, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Button, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Button, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Button, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Button, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ButtonBase : System.Windows.Controls.Primitives.ButtonBase
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<ButtonBase, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ButtonBase, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ButtonBase, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<ButtonBase, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<ButtonBase, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ButtonBase, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ButtonBase, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ButtonBase, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ButtonBase, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ButtonBase, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ButtonBase, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ButtonBase, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ButtonBase, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ButtonBase, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ButtonBase, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ButtonBase, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ButtonBase, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ButtonBase, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ButtonBase, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Calendar : System.Windows.Controls.Calendar
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Calendar, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Calendar, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Calendar, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Calendar, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Calendar, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Calendar, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Calendar, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Calendar, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Calendar, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Calendar, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Calendar, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Calendar, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Calendar, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Calendar, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Calendar, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Calendar, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Canvas : System.Windows.Controls.Canvas
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<Canvas, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Canvas, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Canvas, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Canvas, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Canvas, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Canvas, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Canvas, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Canvas, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Canvas, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<Canvas, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Canvas, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Canvas, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Canvas, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Canvas, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Canvas, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Canvas, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Canvas, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Canvas, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class CheckBox : System.Windows.Controls.CheckBox
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<CheckBox, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<System.Nullable<bool>>> cellIsChecked;

		public IProperty<System.Nullable<bool>> _IsChecked_
		{
			get
			{
				PrepareIsChecked();
				return cellIsChecked.Value;
			}

			set
			{
				PrepareIsChecked();
				cellIsChecked.Value = value;
			}
		}

		public new System.Nullable<bool> IsChecked
		{
			get
			{
				PrepareIsChecked();
				return _IsChecked_.Value;
			}

			set
			{
				PrepareIsChecked();
				_IsChecked_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Nullable<bool>> bridgeIsChecked;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<CheckBox, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<CheckBox, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<CheckBox, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<CheckBox, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<CheckBox, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<CheckBox, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<CheckBox, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<CheckBox, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<CheckBox, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<CheckBox, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<CheckBox, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<CheckBox, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsChecked()
		{
			if (bridgeIsChecked == null)
			{
				bridgeIsChecked = new DependencyPropertyBridge<CheckBox, System.Nullable<bool>>(this, "IsChecked");
				cellIsChecked = new Cell<IProperty<System.Nullable<bool>>>(
					new LazyCache<System.Nullable<bool>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsChecked.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsChecked.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<CheckBox, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<CheckBox, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<CheckBox, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<CheckBox, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<CheckBox, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<CheckBox, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsChecked != null)
			{
				bridgeIsChecked.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ColumnDefinition : System.Windows.Controls.ColumnDefinition
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<ColumnDefinition, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<ColumnDefinition, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<ColumnDefinition, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ColumnDefinition, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<ColumnDefinition, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ColumnDefinition, object> bridgeToolTip;

		Cell<IProperty<System.Windows.GridLength>> cellWidth;

		public IProperty<System.Windows.GridLength> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new System.Windows.GridLength Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ColumnDefinition, System.Windows.GridLength> bridgeWidth;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<ColumnDefinition, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<ColumnDefinition, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<ColumnDefinition, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ColumnDefinition, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<ColumnDefinition, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ColumnDefinition, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ColumnDefinition, System.Windows.GridLength>(this, "Width");
				cellWidth = new Cell<IProperty<System.Windows.GridLength>>(
					new LazyCache<System.Windows.GridLength>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ComboBox : System.Windows.Controls.ComboBox
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsDropDownOpen;

		public IProperty<bool> _IsDropDownOpen_
		{
			get
			{
				PrepareIsDropDownOpen();
				return cellIsDropDownOpen.Value;
			}

			set
			{
				PrepareIsDropDownOpen();
				cellIsDropDownOpen.Value = value;
			}
		}

		public new bool IsDropDownOpen
		{
			get
			{
				PrepareIsDropDownOpen();
				return _IsDropDownOpen_.Value;
			}

			set
			{
				PrepareIsDropDownOpen();
				_IsDropDownOpen_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, bool> bridgeIsDropDownOpen;

		Cell<IProperty<bool>> cellIsEditable;

		public IProperty<bool> _IsEditable_
		{
			get
			{
				PrepareIsEditable();
				return cellIsEditable.Value;
			}

			set
			{
				PrepareIsEditable();
				cellIsEditable.Value = value;
			}
		}

		public new bool IsEditable
		{
			get
			{
				PrepareIsEditable();
				return _IsEditable_.Value;
			}

			set
			{
				PrepareIsEditable();
				_IsEditable_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, bool> bridgeIsEditable;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, bool> bridgeIsEnabled;

		Cell<IProperty<bool>> cellIsReadOnly;

		public IProperty<bool> _IsReadOnly_
		{
			get
			{
				PrepareIsReadOnly();
				return cellIsReadOnly.Value;
			}

			set
			{
				PrepareIsReadOnly();
				cellIsReadOnly.Value = value;
			}
		}

		public new bool IsReadOnly
		{
			get
			{
				PrepareIsReadOnly();
				return _IsReadOnly_.Value;
			}

			set
			{
				PrepareIsReadOnly();
				_IsReadOnly_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, bool> bridgeIsReadOnly;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<ComboBox, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<double>> cellMaxDropDownHeight;

		public IProperty<double> _MaxDropDownHeight_
		{
			get
			{
				PrepareMaxDropDownHeight();
				return cellMaxDropDownHeight.Value;
			}

			set
			{
				PrepareMaxDropDownHeight();
				cellMaxDropDownHeight.Value = value;
			}
		}

		public new double MaxDropDownHeight
		{
			get
			{
				PrepareMaxDropDownHeight();
				return _MaxDropDownHeight_.Value;
			}

			set
			{
				PrepareMaxDropDownHeight();
				_MaxDropDownHeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, double> bridgeMaxDropDownHeight;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, string> bridgeName;

		Cell<IProperty<object>> cellSelectedItem;

		public IProperty<object> _SelectedItem_
		{
			get
			{
				PrepareSelectedItem();
				return cellSelectedItem.Value;
			}

			set
			{
				PrepareSelectedItem();
				cellSelectedItem.Value = value;
			}
		}

		public new object SelectedItem
		{
			get
			{
				PrepareSelectedItem();
				return _SelectedItem_.Value;
			}

			set
			{
				PrepareSelectedItem();
				_SelectedItem_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, object> bridgeSelectedItem;

		Cell<IProperty<bool>> cellShouldPreserveUserEnteredPrefix;

		public IProperty<bool> _ShouldPreserveUserEnteredPrefix_
		{
			get
			{
				PrepareShouldPreserveUserEnteredPrefix();
				return cellShouldPreserveUserEnteredPrefix.Value;
			}

			set
			{
				PrepareShouldPreserveUserEnteredPrefix();
				cellShouldPreserveUserEnteredPrefix.Value = value;
			}
		}

		public new bool ShouldPreserveUserEnteredPrefix
		{
			get
			{
				PrepareShouldPreserveUserEnteredPrefix();
				return _ShouldPreserveUserEnteredPrefix_.Value;
			}

			set
			{
				PrepareShouldPreserveUserEnteredPrefix();
				_ShouldPreserveUserEnteredPrefix_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, bool> bridgeShouldPreserveUserEnteredPrefix;

		Cell<IProperty<string>> cellText;

		public IProperty<string> _Text_
		{
			get
			{
				PrepareText();
				return cellText.Value;
			}

			set
			{
				PrepareText();
				cellText.Value = value;
			}
		}

		public new string Text
		{
			get
			{
				PrepareText();
				return _Text_.Value;
			}

			set
			{
				PrepareText();
				_Text_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, string> bridgeText;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBox, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ComboBox, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ComboBox, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ComboBox, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ComboBox, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ComboBox, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ComboBox, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ComboBox, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ComboBox, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ComboBox, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsDropDownOpen()
		{
			if (bridgeIsDropDownOpen == null)
			{
				bridgeIsDropDownOpen = new DependencyPropertyBridge<ComboBox, bool>(this, "IsDropDownOpen");
				cellIsDropDownOpen = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsDropDownOpen.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsDropDownOpen.Activate();
				}
			}
		}

		void PrepareIsEditable()
		{
			if (bridgeIsEditable == null)
			{
				bridgeIsEditable = new DependencyPropertyBridge<ComboBox, bool>(this, "IsEditable");
				cellIsEditable = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEditable.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEditable.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ComboBox, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareIsReadOnly()
		{
			if (bridgeIsReadOnly == null)
			{
				bridgeIsReadOnly = new DependencyPropertyBridge<ComboBox, bool>(this, "IsReadOnly");
				cellIsReadOnly = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsReadOnly.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsReadOnly.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<ComboBox, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<ComboBox, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ComboBox, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareMaxDropDownHeight()
		{
			if (bridgeMaxDropDownHeight == null)
			{
				bridgeMaxDropDownHeight = new DependencyPropertyBridge<ComboBox, double>(this, "MaxDropDownHeight");
				cellMaxDropDownHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMaxDropDownHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMaxDropDownHeight.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ComboBox, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSelectedItem()
		{
			if (bridgeSelectedItem == null)
			{
				bridgeSelectedItem = new DependencyPropertyBridge<ComboBox, object>(this, "SelectedItem");
				cellSelectedItem = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItem.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItem.Activate();
				}
			}
		}

		void PrepareShouldPreserveUserEnteredPrefix()
		{
			if (bridgeShouldPreserveUserEnteredPrefix == null)
			{
				bridgeShouldPreserveUserEnteredPrefix = new DependencyPropertyBridge<ComboBox, bool>(this, "ShouldPreserveUserEnteredPrefix");
				cellShouldPreserveUserEnteredPrefix = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeShouldPreserveUserEnteredPrefix.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeShouldPreserveUserEnteredPrefix.Activate();
				}
			}
		}

		void PrepareText()
		{
			if (bridgeText == null)
			{
				bridgeText = new DependencyPropertyBridge<ComboBox, string>(this, "Text");
				cellText = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeText.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeText.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ComboBox, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ComboBox, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ComboBox, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsDropDownOpen != null)
			{
				bridgeIsDropDownOpen.Activate();
			}
			if (bridgeIsEditable != null)
			{
				bridgeIsEditable.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeIsReadOnly != null)
			{
				bridgeIsReadOnly.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeMaxDropDownHeight != null)
			{
				bridgeMaxDropDownHeight.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSelectedItem != null)
			{
				bridgeSelectedItem.Activate();
			}
			if (bridgeShouldPreserveUserEnteredPrefix != null)
			{
				bridgeShouldPreserveUserEnteredPrefix.Activate();
			}
			if (bridgeText != null)
			{
				bridgeText.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ComboBoxItem : System.Windows.Controls.ComboBoxItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ComboBoxItem, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ComboBoxItem, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<ComboBoxItem, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ComboBoxItem, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ComboBoxItem, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ComboBoxItem, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ComboBoxItem, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ComboBoxItem, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ComboBoxItem, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ComboBoxItem, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ComboBoxItem, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ComboBoxItem, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ComboBoxItem, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ComboBoxItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ComboBoxItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ComboBoxItem, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ComboBoxItem, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ContentControl : System.Windows.Controls.ContentControl
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentControl, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ContentControl, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<ContentControl, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ContentControl, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ContentControl, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ContentControl, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ContentControl, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ContentControl, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ContentControl, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ContentControl, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ContentControl, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ContentControl, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ContentControl, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ContentControl, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ContentControl, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ContentControl, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ContentControl, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ContentPresenter : System.Windows.Controls.ContentPresenter
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ContentPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ContentPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ContentPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ContentPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ContentPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ContentPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ContentPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ContentPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ContentPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ContextMenu : System.Windows.Controls.ContextMenu
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<ContextMenu, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ContextMenu, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ContextMenu, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ContextMenu, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ContextMenu, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ContextMenu, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ContextMenu, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ContextMenu, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ContextMenu, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ContextMenu, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ContextMenu, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ContextMenu, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<ContextMenu, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<ContextMenu, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ContextMenu, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ContextMenu, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ContextMenu, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ContextMenu, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ContextMenu, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Control : System.Windows.Controls.Control
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Control, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Control, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Control, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Control, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Control, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Control, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Control, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Control, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Control, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Control, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Control, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Control, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Control, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Control, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Control, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Control, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGrid : System.Windows.Controls.DataGrid
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<DataGrid, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, string> bridgeName;

		Cell<IProperty<object>> cellSelectedItem;

		public IProperty<object> _SelectedItem_
		{
			get
			{
				PrepareSelectedItem();
				return cellSelectedItem.Value;
			}

			set
			{
				PrepareSelectedItem();
				cellSelectedItem.Value = value;
			}
		}

		public new object SelectedItem
		{
			get
			{
				PrepareSelectedItem();
				return _SelectedItem_.Value;
			}

			set
			{
				PrepareSelectedItem();
				_SelectedItem_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, object> bridgeSelectedItem;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGrid, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DataGrid, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DataGrid, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DataGrid, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DataGrid, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DataGrid, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DataGrid, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DataGrid, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGrid, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGrid, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGrid, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<DataGrid, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<DataGrid, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGrid, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGrid, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSelectedItem()
		{
			if (bridgeSelectedItem == null)
			{
				bridgeSelectedItem = new DependencyPropertyBridge<DataGrid, object>(this, "SelectedItem");
				cellSelectedItem = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItem.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItem.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGrid, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGrid, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGrid, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSelectedItem != null)
			{
				bridgeSelectedItem.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridCell : System.Windows.Controls.DataGridCell
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCell, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DataGridCell, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<DataGridCell, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DataGridCell, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DataGridCell, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DataGridCell, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DataGridCell, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DataGridCell, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DataGridCell, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridCell, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridCell, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridCell, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridCell, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridCell, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridCell, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridCell, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridCell, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridCellsPanel : System.Windows.Controls.DataGridCellsPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<DataGridCellsPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPanel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPanel, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<DataGridCellsPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridCellsPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridCellsPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridCellsPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridCellsPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridCellsPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridCellsPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridCellsPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridCellsPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridCellsPresenter : System.Windows.Controls.Primitives.DataGridCellsPresenter
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<DataGridCellsPresenter, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridCellsPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DataGridCellsPresenter, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridCellsPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridCellsPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<DataGridCellsPresenter, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridCellsPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridCellsPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridCellsPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridCellsPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridColumnHeader : System.Windows.Controls.Primitives.DataGridColumnHeader
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<DataGridColumnHeader, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeader, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<DataGridColumnHeader, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<DataGridColumnHeader, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DataGridColumnHeader, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridColumnHeader, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridColumnHeader, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridColumnHeader, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridColumnHeader, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridColumnHeader, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridColumnHeader, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridColumnHeadersPresenter : System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<DataGridColumnHeadersPresenter, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridColumnHeadersPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<DataGridColumnHeadersPresenter, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridColumnHeadersPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridDetailsPresenter : System.Windows.Controls.Primitives.DataGridDetailsPresenter
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridDetailsPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridDetailsPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridDetailsPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridDetailsPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridDetailsPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridDetailsPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridDetailsPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridDetailsPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridDetailsPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridDetailsPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridDetailsPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridDetailsPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridDetailsPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridDetailsPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridDetailsPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridDetailsPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridRow : System.Windows.Controls.DataGridRow
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRow, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DataGridRow, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DataGridRow, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DataGridRow, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DataGridRow, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DataGridRow, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DataGridRow, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DataGridRow, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridRow, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridRow, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridRow, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridRow, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridRow, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridRow, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridRow, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridRow, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridRowHeader : System.Windows.Controls.Primitives.DataGridRowHeader
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<DataGridRowHeader, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowHeader, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<DataGridRowHeader, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<DataGridRowHeader, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DataGridRowHeader, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridRowHeader, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridRowHeader, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridRowHeader, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridRowHeader, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridRowHeader, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridRowHeader, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DataGridRowsPresenter : System.Windows.Controls.Primitives.DataGridRowsPresenter
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<DataGridRowsPresenter, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowsPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowsPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowsPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowsPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowsPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowsPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowsPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DataGridRowsPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<DataGridRowsPresenter, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DataGridRowsPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DataGridRowsPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DataGridRowsPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DataGridRowsPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DataGridRowsPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DataGridRowsPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DataGridRowsPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DataGridRowsPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DatePicker : System.Windows.Controls.DatePicker
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DatePicker, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DatePicker, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DatePicker, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DatePicker, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DatePicker, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DatePicker, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DatePicker, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DatePicker, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DatePicker, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DatePicker, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DatePicker, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DatePicker, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DatePicker, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DatePicker, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DatePicker, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DatePicker, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Decorator : System.Windows.Controls.Decorator
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Decorator, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Decorator, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Decorator, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Decorator, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Decorator, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Decorator, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Decorator, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Decorator, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Decorator, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Decorator, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Decorator, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Decorator, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Decorator, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Decorator, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Decorator, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Decorator, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DockPanel : System.Windows.Controls.DockPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<DockPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, bool> bridgeIsEnabled;

		Cell<IProperty<bool>> cellLastChildFill;

		public IProperty<bool> _LastChildFill_
		{
			get
			{
				PrepareLastChildFill();
				return cellLastChildFill.Value;
			}

			set
			{
				PrepareLastChildFill();
				cellLastChildFill.Value = value;
			}
		}

		public new bool LastChildFill
		{
			get
			{
				PrepareLastChildFill();
				return _LastChildFill_.Value;
			}

			set
			{
				PrepareLastChildFill();
				_LastChildFill_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, bool> bridgeLastChildFill;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DockPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<DockPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DockPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DockPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DockPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareLastChildFill()
		{
			if (bridgeLastChildFill == null)
			{
				bridgeLastChildFill = new DependencyPropertyBridge<DockPanel, bool>(this, "LastChildFill");
				cellLastChildFill = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLastChildFill.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLastChildFill.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DockPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DockPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DockPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DockPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DockPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeLastChildFill != null)
			{
				bridgeLastChildFill.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DocumentPageView : System.Windows.Controls.Primitives.DocumentPageView
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentPageView, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentPageView, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentPageView, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentPageView, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentPageView, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentPageView, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentPageView, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentPageView, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DocumentPageView, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DocumentPageView, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DocumentPageView, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DocumentPageView, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DocumentPageView, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DocumentPageView, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DocumentPageView, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DocumentPageView, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DocumentViewer : System.Windows.Controls.DocumentViewer
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewer, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DocumentViewer, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DocumentViewer, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DocumentViewer, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DocumentViewer, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DocumentViewer, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DocumentViewer, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DocumentViewer, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DocumentViewer, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DocumentViewer, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DocumentViewer, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DocumentViewer, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DocumentViewer, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DocumentViewer, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DocumentViewer, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DocumentViewer, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class DocumentViewerBase : System.Windows.Controls.Primitives.DocumentViewerBase
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<DocumentViewerBase, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<DocumentViewerBase, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<DocumentViewerBase, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<DocumentViewerBase, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<DocumentViewerBase, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<DocumentViewerBase, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<DocumentViewerBase, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<DocumentViewerBase, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Expander : System.Windows.Controls.Expander
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<object>> cellHeader;

		public IProperty<object> _Header_
		{
			get
			{
				PrepareHeader();
				return cellHeader.Value;
			}

			set
			{
				PrepareHeader();
				cellHeader.Value = value;
			}
		}

		public new object Header
		{
			get
			{
				PrepareHeader();
				return _Header_.Value;
			}

			set
			{
				PrepareHeader();
				_Header_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, object> bridgeHeader;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, bool> bridgeIsEnabled;

		Cell<IProperty<bool>> cellIsExpanded;

		public IProperty<bool> _IsExpanded_
		{
			get
			{
				PrepareIsExpanded();
				return cellIsExpanded.Value;
			}

			set
			{
				PrepareIsExpanded();
				cellIsExpanded.Value = value;
			}
		}

		public new bool IsExpanded
		{
			get
			{
				PrepareIsExpanded();
				return _IsExpanded_.Value;
			}

			set
			{
				PrepareIsExpanded();
				_IsExpanded_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, bool> bridgeIsExpanded;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Expander, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Expander, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<Expander, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Expander, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Expander, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Expander, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Expander, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Expander, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Expander, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeader()
		{
			if (bridgeHeader == null)
			{
				bridgeHeader = new DependencyPropertyBridge<Expander, object>(this, "Header");
				cellHeader = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeader.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeader.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Expander, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Expander, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Expander, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareIsExpanded()
		{
			if (bridgeIsExpanded == null)
			{
				bridgeIsExpanded = new DependencyPropertyBridge<Expander, bool>(this, "IsExpanded");
				cellIsExpanded = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsExpanded.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsExpanded.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Expander, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Expander, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Expander, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Expander, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Expander, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeader != null)
			{
				bridgeHeader.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeIsExpanded != null)
			{
				bridgeIsExpanded.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Figure : System.Windows.Documents.Figure
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Figure, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Figure, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Figure, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Figure, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Figure, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Figure, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Figure, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Figure, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Figure, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Figure, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Figure, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Figure, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class FixedDocument : System.Windows.Documents.FixedDocument
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocument, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocument, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocument, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocument, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocument, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocument, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<FixedDocument, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<FixedDocument, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<FixedDocument, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<FixedDocument, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<FixedDocument, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<FixedDocument, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class FixedDocumentSequence : System.Windows.Documents.FixedDocumentSequence
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocumentSequence, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocumentSequence, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocumentSequence, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocumentSequence, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocumentSequence, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<FixedDocumentSequence, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<FixedDocumentSequence, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<FixedDocumentSequence, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<FixedDocumentSequence, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<FixedDocumentSequence, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<FixedDocumentSequence, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<FixedDocumentSequence, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class Floater : System.Windows.Documents.Floater
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Floater, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Floater, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Floater, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Floater, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Floater, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Floater, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Floater, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Floater, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Floater, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Floater, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Floater, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Floater, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class FlowDocument : System.Windows.Documents.FlowDocument
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocument, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocument, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocument, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocument, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocument, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocument, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<FlowDocument, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<FlowDocument, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<FlowDocument, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<FlowDocument, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<FlowDocument, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<FlowDocument, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class FlowDocumentPageViewer : System.Windows.Controls.FlowDocumentPageViewer
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentPageViewer, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<FlowDocumentPageViewer, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<FlowDocumentPageViewer, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<FlowDocumentPageViewer, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<FlowDocumentPageViewer, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<FlowDocumentPageViewer, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<FlowDocumentPageViewer, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<FlowDocumentPageViewer, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class FlowDocumentReader : System.Windows.Controls.FlowDocumentReader
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentReader, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<FlowDocumentReader, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<FlowDocumentReader, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<FlowDocumentReader, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<FlowDocumentReader, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<FlowDocumentReader, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<FlowDocumentReader, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<FlowDocumentReader, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class FlowDocumentScrollViewer : System.Windows.Controls.FlowDocumentScrollViewer
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<FlowDocumentScrollViewer, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<FlowDocumentScrollViewer, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<FlowDocumentScrollViewer, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<FlowDocumentScrollViewer, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<FlowDocumentScrollViewer, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<FlowDocumentScrollViewer, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<FlowDocumentScrollViewer, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<FlowDocumentScrollViewer, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Frame : System.Windows.Controls.Frame
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Frame, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Frame, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<Frame, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Frame, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Frame, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Frame, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Frame, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Frame, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Frame, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Frame, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Frame, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Frame, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Frame, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Frame, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Frame, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Frame, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Frame, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class FrameworkContentElement : System.Windows.FrameworkContentElement
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkContentElement, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkContentElement, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkContentElement, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkContentElement, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkContentElement, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkContentElement, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<FrameworkContentElement, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<FrameworkContentElement, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<FrameworkContentElement, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<FrameworkContentElement, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<FrameworkContentElement, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<FrameworkContentElement, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class FrameworkElement : System.Windows.FrameworkElement
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkElement, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkElement, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkElement, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkElement, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkElement, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkElement, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkElement, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<FrameworkElement, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<FrameworkElement, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<FrameworkElement, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<FrameworkElement, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<FrameworkElement, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<FrameworkElement, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<FrameworkElement, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<FrameworkElement, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<FrameworkElement, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Grid : System.Windows.Controls.Grid
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<Grid, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>>> cellColumnDefinitions;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>> _ColumnDefinitions_
		{
			get
			{
				PrepareColumnDefinitions();
				return cellColumnDefinitions.Value;
			}

			set
			{
				PrepareColumnDefinitions();
				cellColumnDefinitions.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition> ColumnDefinitions
		{
			get
			{
				PrepareColumnDefinitions();
				return _ColumnDefinitions_.Value;
			}

			set
			{
				PrepareColumnDefinitions();
				_ColumnDefinitions_.Value = value;
			}
		}

		CollectionBridge<Grid, System.Windows.Controls.ColumnDefinition> bridgeColumnDefinitions;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Grid, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Grid, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Grid, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Grid, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Grid, string> bridgeName;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>>> cellRowDefinitions;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>> _RowDefinitions_
		{
			get
			{
				PrepareRowDefinitions();
				return cellRowDefinitions.Value;
			}

			set
			{
				PrepareRowDefinitions();
				cellRowDefinitions.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition> RowDefinitions
		{
			get
			{
				PrepareRowDefinitions();
				return _RowDefinitions_.Value;
			}

			set
			{
				PrepareRowDefinitions();
				_RowDefinitions_.Value = value;
			}
		}

		CollectionBridge<Grid, System.Windows.Controls.RowDefinition> bridgeRowDefinitions;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Grid, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Grid, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Grid, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<Grid, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareColumnDefinitions()
		{
			if (bridgeColumnDefinitions == null)
			{
				bridgeColumnDefinitions = new CollectionBridge<Grid, System.Windows.Controls.ColumnDefinition>(this, "ColumnDefinitions");				
				cellColumnDefinitions = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeColumnDefinitions.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeColumnDefinitions.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Grid, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Grid, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Grid, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Grid, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Grid, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareRowDefinitions()
		{
			if (bridgeRowDefinitions == null)
			{
				bridgeRowDefinitions = new CollectionBridge<Grid, System.Windows.Controls.RowDefinition>(this, "RowDefinitions");				
				cellRowDefinitions = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeRowDefinitions.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeRowDefinitions.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Grid, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Grid, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Grid, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeColumnDefinitions != null)
			{
				bridgeColumnDefinitions.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeRowDefinitions != null)
			{
				bridgeRowDefinitions.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class GridSplitter : System.Windows.Controls.GridSplitter
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<GridSplitter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<GridSplitter, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<GridSplitter, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<GridSplitter, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<GridSplitter, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<GridSplitter, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<GridSplitter, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<GridSplitter, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<GridSplitter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<GridSplitter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<GridSplitter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<GridSplitter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<GridSplitter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<GridSplitter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<GridSplitter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<GridSplitter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class GridViewColumnHeader : System.Windows.Controls.GridViewColumnHeader
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<GridViewColumnHeader, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewColumnHeader, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<GridViewColumnHeader, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<GridViewColumnHeader, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<GridViewColumnHeader, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<GridViewColumnHeader, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<GridViewColumnHeader, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<GridViewColumnHeader, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<GridViewColumnHeader, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<GridViewColumnHeader, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<GridViewColumnHeader, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class GridViewHeaderRowPresenter : System.Windows.Controls.GridViewHeaderRowPresenter
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewHeaderRowPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewHeaderRowPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewHeaderRowPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewHeaderRowPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewHeaderRowPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewHeaderRowPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewHeaderRowPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewHeaderRowPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<GridViewHeaderRowPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<GridViewHeaderRowPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<GridViewHeaderRowPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<GridViewHeaderRowPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<GridViewHeaderRowPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<GridViewHeaderRowPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<GridViewHeaderRowPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<GridViewHeaderRowPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class GridViewRowPresenter : System.Windows.Controls.GridViewRowPresenter
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewRowPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewRowPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewRowPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewRowPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewRowPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewRowPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewRowPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<GridViewRowPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<GridViewRowPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<GridViewRowPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<GridViewRowPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<GridViewRowPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<GridViewRowPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<GridViewRowPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<GridViewRowPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<GridViewRowPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class GroupBox : System.Windows.Controls.GroupBox
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<object>> cellHeader;

		public IProperty<object> _Header_
		{
			get
			{
				PrepareHeader();
				return cellHeader.Value;
			}

			set
			{
				PrepareHeader();
				cellHeader.Value = value;
			}
		}

		public new object Header
		{
			get
			{
				PrepareHeader();
				return _Header_.Value;
			}

			set
			{
				PrepareHeader();
				_Header_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, object> bridgeHeader;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupBox, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<GroupBox, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<GroupBox, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<GroupBox, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<GroupBox, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<GroupBox, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<GroupBox, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<GroupBox, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<GroupBox, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeader()
		{
			if (bridgeHeader == null)
			{
				bridgeHeader = new DependencyPropertyBridge<GroupBox, object>(this, "Header");
				cellHeader = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeader.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeader.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<GroupBox, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<GroupBox, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<GroupBox, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<GroupBox, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<GroupBox, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<GroupBox, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<GroupBox, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<GroupBox, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeader != null)
			{
				bridgeHeader.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class GroupItem : System.Windows.Controls.GroupItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<GroupItem, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<GroupItem, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<GroupItem, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<GroupItem, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<GroupItem, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<GroupItem, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<GroupItem, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<GroupItem, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<GroupItem, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<GroupItem, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<GroupItem, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<GroupItem, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<GroupItem, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<GroupItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<GroupItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<GroupItem, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<GroupItem, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class HeaderedContentControl : System.Windows.Controls.HeaderedContentControl
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<object>> cellHeader;

		public IProperty<object> _Header_
		{
			get
			{
				PrepareHeader();
				return cellHeader.Value;
			}

			set
			{
				PrepareHeader();
				cellHeader.Value = value;
			}
		}

		public new object Header
		{
			get
			{
				PrepareHeader();
				return _Header_.Value;
			}

			set
			{
				PrepareHeader();
				_Header_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, object> bridgeHeader;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedContentControl, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<HeaderedContentControl, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<HeaderedContentControl, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeader()
		{
			if (bridgeHeader == null)
			{
				bridgeHeader = new DependencyPropertyBridge<HeaderedContentControl, object>(this, "Header");
				cellHeader = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeader.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeader.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<HeaderedContentControl, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<HeaderedContentControl, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<HeaderedContentControl, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<HeaderedContentControl, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<HeaderedContentControl, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<HeaderedContentControl, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeader != null)
			{
				bridgeHeader.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class HeaderedItemsControl : System.Windows.Controls.HeaderedItemsControl
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<object>> cellHeader;

		public IProperty<object> _Header_
		{
			get
			{
				PrepareHeader();
				return cellHeader.Value;
			}

			set
			{
				PrepareHeader();
				cellHeader.Value = value;
			}
		}

		public new object Header
		{
			get
			{
				PrepareHeader();
				return _Header_.Value;
			}

			set
			{
				PrepareHeader();
				_Header_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, object> bridgeHeader;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<HeaderedItemsControl, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<HeaderedItemsControl, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<HeaderedItemsControl, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeader()
		{
			if (bridgeHeader == null)
			{
				bridgeHeader = new DependencyPropertyBridge<HeaderedItemsControl, object>(this, "Header");
				cellHeader = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeader.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeader.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<HeaderedItemsControl, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<HeaderedItemsControl, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<HeaderedItemsControl, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<HeaderedItemsControl, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<HeaderedItemsControl, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<HeaderedItemsControl, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<HeaderedItemsControl, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeader != null)
			{
				bridgeHeader.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Hyperlink : System.Windows.Documents.Hyperlink
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Hyperlink, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Hyperlink, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Hyperlink, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Hyperlink, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Hyperlink, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Hyperlink, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Hyperlink, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Hyperlink, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Hyperlink, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Hyperlink, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Hyperlink, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Hyperlink, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class Image : System.Windows.Controls.Image
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, string> bridgeName;

		Cell<IProperty<System.Windows.Media.ImageSource>> cellSource;

		public IProperty<System.Windows.Media.ImageSource> _Source_
		{
			get
			{
				PrepareSource();
				return cellSource.Value;
			}

			set
			{
				PrepareSource();
				cellSource.Value = value;
			}
		}

		public new System.Windows.Media.ImageSource Source
		{
			get
			{
				PrepareSource();
				return _Source_.Value;
			}

			set
			{
				PrepareSource();
				_Source_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, System.Windows.Media.ImageSource> bridgeSource;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Image, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Image, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Image, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Image, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Image, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Image, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSource()
		{
			if (bridgeSource == null)
			{
				bridgeSource = new DependencyPropertyBridge<Image, System.Windows.Media.ImageSource>(this, "Source");
				cellSource = new Cell<IProperty<System.Windows.Media.ImageSource>>(
					new LazyCache<System.Windows.Media.ImageSource>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSource.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSource.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Image, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Image, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Image, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSource != null)
			{
				bridgeSource.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class InkCanvas : System.Windows.Controls.InkCanvas
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<InkCanvas, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<InkCanvas, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<InkCanvas, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<InkCanvas, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<InkCanvas, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<InkCanvas, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<InkCanvas, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<InkCanvas, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<InkCanvas, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<InkCanvas, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<InkCanvas, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<InkCanvas, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<InkCanvas, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<InkCanvas, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<InkCanvas, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<InkCanvas, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class InkPresenter : System.Windows.Controls.InkPresenter
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<InkPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<InkPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<InkPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<InkPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<InkPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<InkPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<InkPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<InkPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<InkPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<InkPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<InkPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<InkPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<InkPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<InkPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<InkPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<InkPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Inline : System.Windows.Documents.Inline
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Inline, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Inline, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Inline, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Inline, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Inline, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Inline, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Inline, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Inline, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Inline, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Inline, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Inline, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Inline, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class InlineUIContainer : System.Windows.Documents.InlineUIContainer
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<InlineUIContainer, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<InlineUIContainer, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<InlineUIContainer, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<InlineUIContainer, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<InlineUIContainer, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<InlineUIContainer, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<InlineUIContainer, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<InlineUIContainer, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<InlineUIContainer, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<InlineUIContainer, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<InlineUIContainer, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<InlineUIContainer, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class Italic : System.Windows.Documents.Italic
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Italic, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Italic, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Italic, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Italic, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Italic, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Italic, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Italic, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Italic, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Italic, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Italic, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Italic, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Italic, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class ItemsControl : System.Windows.Controls.ItemsControl
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<ItemsControl, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsControl, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ItemsControl, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ItemsControl, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ItemsControl, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ItemsControl, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ItemsControl, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ItemsControl, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ItemsControl, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ItemsControl, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ItemsControl, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ItemsControl, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<ItemsControl, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<ItemsControl, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ItemsControl, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ItemsControl, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ItemsControl, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ItemsControl, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ItemsControl, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ItemsPresenter : System.Windows.Controls.ItemsPresenter
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsPresenter, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsPresenter, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsPresenter, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsPresenter, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsPresenter, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsPresenter, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsPresenter, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ItemsPresenter, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ItemsPresenter, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ItemsPresenter, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ItemsPresenter, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ItemsPresenter, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ItemsPresenter, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ItemsPresenter, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ItemsPresenter, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ItemsPresenter, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Label : System.Windows.Controls.Label
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Label, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Label, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<Label, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Label, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Label, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Label, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Label, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Label, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Label, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Label, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Label, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Label, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Label, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Label, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Label, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Label, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Label, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class LineBreak : System.Windows.Documents.LineBreak
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<LineBreak, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<LineBreak, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<LineBreak, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<LineBreak, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<LineBreak, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<LineBreak, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<LineBreak, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<LineBreak, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<LineBreak, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<LineBreak, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<LineBreak, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<LineBreak, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class List : System.Windows.Documents.List
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<List, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<List, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<List, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<List, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<List, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<List, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<List, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<List, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<List, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<List, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<List, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<List, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class ListBox : System.Windows.Controls.ListBox
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<ListBox, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, string> bridgeName;

		Cell<IProperty<object>> cellSelectedItem;

		public IProperty<object> _SelectedItem_
		{
			get
			{
				PrepareSelectedItem();
				return cellSelectedItem.Value;
			}

			set
			{
				PrepareSelectedItem();
				cellSelectedItem.Value = value;
			}
		}

		public new object SelectedItem
		{
			get
			{
				PrepareSelectedItem();
				return _SelectedItem_.Value;
			}

			set
			{
				PrepareSelectedItem();
				_SelectedItem_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, object> bridgeSelectedItem;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellSelectedItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _SelectedItems_
		{
			get
			{
				PrepareSelectedItems();
				return cellSelectedItems.Value;
			}

			set
			{
				PrepareSelectedItems();
				cellSelectedItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> SelectedItems
		{
			get
			{
				PrepareSelectedItems();
				return _SelectedItems_.Value;
			}

			set
			{
				PrepareSelectedItems();
				_SelectedItems_.Value = value;
			}
		}

		CollectionBridge<ListBox, object> bridgeSelectedItems;

		Cell<IProperty<System.Windows.Controls.SelectionMode>> cellSelectionMode;

		public IProperty<System.Windows.Controls.SelectionMode> _SelectionMode_
		{
			get
			{
				PrepareSelectionMode();
				return cellSelectionMode.Value;
			}

			set
			{
				PrepareSelectionMode();
				cellSelectionMode.Value = value;
			}
		}

		public new System.Windows.Controls.SelectionMode SelectionMode
		{
			get
			{
				PrepareSelectionMode();
				return _SelectionMode_.Value;
			}

			set
			{
				PrepareSelectionMode();
				_SelectionMode_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.Controls.SelectionMode> bridgeSelectionMode;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBox, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ListBox, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ListBox, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ListBox, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ListBox, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ListBox, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ListBox, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ListBox, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ListBox, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ListBox, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ListBox, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<ListBox, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<ListBox, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ListBox, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ListBox, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSelectedItem()
		{
			if (bridgeSelectedItem == null)
			{
				bridgeSelectedItem = new DependencyPropertyBridge<ListBox, object>(this, "SelectedItem");
				cellSelectedItem = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItem.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItem.Activate();
				}
			}
		}

		void PrepareSelectedItems()
		{
			if (bridgeSelectedItems == null)
			{
				bridgeSelectedItems = new CollectionBridge<ListBox, object>(this, "SelectedItems");				
				cellSelectedItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItems.Activate();
				}
			}
		}

		void PrepareSelectionMode()
		{
			if (bridgeSelectionMode == null)
			{
				bridgeSelectionMode = new DependencyPropertyBridge<ListBox, System.Windows.Controls.SelectionMode>(this, "SelectionMode");
				cellSelectionMode = new Cell<IProperty<System.Windows.Controls.SelectionMode>>(
					new LazyCache<System.Windows.Controls.SelectionMode>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectionMode.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectionMode.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ListBox, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ListBox, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ListBox, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSelectedItem != null)
			{
				bridgeSelectedItem.Activate();
			}
			if (bridgeSelectedItems != null)
			{
				bridgeSelectedItems.Activate();
			}
			if (bridgeSelectionMode != null)
			{
				bridgeSelectionMode.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ListBoxItem : System.Windows.Controls.ListBoxItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ListBoxItem, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ListBoxItem, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<ListBoxItem, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ListBoxItem, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ListBoxItem, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ListBoxItem, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ListBoxItem, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ListBoxItem, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ListBoxItem, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ListBoxItem, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ListBoxItem, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ListBoxItem, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ListBoxItem, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ListBoxItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ListBoxItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ListBoxItem, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ListBoxItem, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ListItem : System.Windows.Documents.ListItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<ListItem, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<ListItem, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<ListItem, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ListItem, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<ListItem, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ListItem, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<ListItem, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<ListItem, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<ListItem, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ListItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<ListItem, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ListItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class ListView : System.Windows.Controls.ListView
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<ListView, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, string> bridgeName;

		Cell<IProperty<object>> cellSelectedItem;

		public IProperty<object> _SelectedItem_
		{
			get
			{
				PrepareSelectedItem();
				return cellSelectedItem.Value;
			}

			set
			{
				PrepareSelectedItem();
				cellSelectedItem.Value = value;
			}
		}

		public new object SelectedItem
		{
			get
			{
				PrepareSelectedItem();
				return _SelectedItem_.Value;
			}

			set
			{
				PrepareSelectedItem();
				_SelectedItem_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, object> bridgeSelectedItem;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellSelectedItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _SelectedItems_
		{
			get
			{
				PrepareSelectedItems();
				return cellSelectedItems.Value;
			}

			set
			{
				PrepareSelectedItems();
				cellSelectedItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> SelectedItems
		{
			get
			{
				PrepareSelectedItems();
				return _SelectedItems_.Value;
			}

			set
			{
				PrepareSelectedItems();
				_SelectedItems_.Value = value;
			}
		}

		CollectionBridge<ListView, object> bridgeSelectedItems;

		Cell<IProperty<System.Windows.Controls.SelectionMode>> cellSelectionMode;

		public IProperty<System.Windows.Controls.SelectionMode> _SelectionMode_
		{
			get
			{
				PrepareSelectionMode();
				return cellSelectionMode.Value;
			}

			set
			{
				PrepareSelectionMode();
				cellSelectionMode.Value = value;
			}
		}

		public new System.Windows.Controls.SelectionMode SelectionMode
		{
			get
			{
				PrepareSelectionMode();
				return _SelectionMode_.Value;
			}

			set
			{
				PrepareSelectionMode();
				_SelectionMode_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.Controls.SelectionMode> bridgeSelectionMode;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<System.Windows.Controls.ViewBase>> cellView;

		public IProperty<System.Windows.Controls.ViewBase> _View_
		{
			get
			{
				PrepareView();
				return cellView.Value;
			}

			set
			{
				PrepareView();
				cellView.Value = value;
			}
		}

		public new System.Windows.Controls.ViewBase View
		{
			get
			{
				PrepareView();
				return _View_.Value;
			}

			set
			{
				PrepareView();
				_View_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, System.Windows.Controls.ViewBase> bridgeView;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ListView, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ListView, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ListView, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ListView, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ListView, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ListView, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ListView, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ListView, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ListView, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ListView, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ListView, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<ListView, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<ListView, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ListView, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ListView, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSelectedItem()
		{
			if (bridgeSelectedItem == null)
			{
				bridgeSelectedItem = new DependencyPropertyBridge<ListView, object>(this, "SelectedItem");
				cellSelectedItem = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItem.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItem.Activate();
				}
			}
		}

		void PrepareSelectedItems()
		{
			if (bridgeSelectedItems == null)
			{
				bridgeSelectedItems = new CollectionBridge<ListView, object>(this, "SelectedItems");				
				cellSelectedItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItems.Activate();
				}
			}
		}

		void PrepareSelectionMode()
		{
			if (bridgeSelectionMode == null)
			{
				bridgeSelectionMode = new DependencyPropertyBridge<ListView, System.Windows.Controls.SelectionMode>(this, "SelectionMode");
				cellSelectionMode = new Cell<IProperty<System.Windows.Controls.SelectionMode>>(
					new LazyCache<System.Windows.Controls.SelectionMode>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectionMode.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectionMode.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ListView, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ListView, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareView()
		{
			if (bridgeView == null)
			{
				bridgeView = new DependencyPropertyBridge<ListView, System.Windows.Controls.ViewBase>(this, "View");
				cellView = new Cell<IProperty<System.Windows.Controls.ViewBase>>(
					new LazyCache<System.Windows.Controls.ViewBase>(() =>
					{
						using (new Snapshot())
						{
							return bridgeView.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeView.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ListView, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSelectedItem != null)
			{
				bridgeSelectedItem.Activate();
			}
			if (bridgeSelectedItems != null)
			{
				bridgeSelectedItems.Activate();
			}
			if (bridgeSelectionMode != null)
			{
				bridgeSelectionMode.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeView != null)
			{
				bridgeView.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ListViewItem : System.Windows.Controls.ListViewItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ListViewItem, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ListViewItem, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<ListViewItem, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ListViewItem, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ListViewItem, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ListViewItem, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ListViewItem, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ListViewItem, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ListViewItem, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ListViewItem, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ListViewItem, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ListViewItem, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ListViewItem, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ListViewItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ListViewItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ListViewItem, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ListViewItem, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class MediaElement : System.Windows.Controls.MediaElement
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<MediaElement, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<MediaElement, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<MediaElement, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<MediaElement, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<MediaElement, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<MediaElement, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<MediaElement, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<MediaElement, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<MediaElement, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<MediaElement, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<MediaElement, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<MediaElement, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<MediaElement, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<MediaElement, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<MediaElement, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<MediaElement, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Menu : System.Windows.Controls.Menu
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<Menu, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Menu, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Menu, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Menu, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Menu, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Menu, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Menu, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Menu, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Menu, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Menu, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Menu, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Menu, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<Menu, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<Menu, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Menu, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Menu, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Menu, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Menu, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Menu, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class MenuBase : System.Windows.Controls.Primitives.MenuBase
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<MenuBase, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuBase, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<MenuBase, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<MenuBase, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<MenuBase, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<MenuBase, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<MenuBase, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<MenuBase, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<MenuBase, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<MenuBase, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<MenuBase, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<MenuBase, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<MenuBase, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<MenuBase, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<MenuBase, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<MenuBase, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<MenuBase, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<MenuBase, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<MenuBase, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class MenuItem : System.Windows.Controls.MenuItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<MenuItem, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<object>> cellHeader;

		public IProperty<object> _Header_
		{
			get
			{
				PrepareHeader();
				return cellHeader.Value;
			}

			set
			{
				PrepareHeader();
				cellHeader.Value = value;
			}
		}

		public new object Header
		{
			get
			{
				PrepareHeader();
				return _Header_.Value;
			}

			set
			{
				PrepareHeader();
				_Header_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, object> bridgeHeader;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<object>> cellIcon;

		public IProperty<object> _Icon_
		{
			get
			{
				PrepareIcon();
				return cellIcon.Value;
			}

			set
			{
				PrepareIcon();
				cellIcon.Value = value;
			}
		}

		public new object Icon
		{
			get
			{
				PrepareIcon();
				return _Icon_.Value;
			}

			set
			{
				PrepareIcon();
				_Icon_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, object> bridgeIcon;

		Cell<IProperty<bool>> cellIsCheckable;

		public IProperty<bool> _IsCheckable_
		{
			get
			{
				PrepareIsCheckable();
				return cellIsCheckable.Value;
			}

			set
			{
				PrepareIsCheckable();
				cellIsCheckable.Value = value;
			}
		}

		public new bool IsCheckable
		{
			get
			{
				PrepareIsCheckable();
				return _IsCheckable_.Value;
			}

			set
			{
				PrepareIsCheckable();
				_IsCheckable_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, bool> bridgeIsCheckable;

		Cell<IProperty<bool>> cellIsChecked;

		public IProperty<bool> _IsChecked_
		{
			get
			{
				PrepareIsChecked();
				return cellIsChecked.Value;
			}

			set
			{
				PrepareIsChecked();
				cellIsChecked.Value = value;
			}
		}

		public new bool IsChecked
		{
			get
			{
				PrepareIsChecked();
				return _IsChecked_.Value;
			}

			set
			{
				PrepareIsChecked();
				_IsChecked_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, bool> bridgeIsChecked;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<MenuItem, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<MenuItem, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<MenuItem, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<MenuItem, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<MenuItem, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<MenuItem, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<MenuItem, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<MenuItem, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<MenuItem, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<MenuItem, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeader()
		{
			if (bridgeHeader == null)
			{
				bridgeHeader = new DependencyPropertyBridge<MenuItem, object>(this, "Header");
				cellHeader = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeader.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeader.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<MenuItem, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<MenuItem, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIcon()
		{
			if (bridgeIcon == null)
			{
				bridgeIcon = new DependencyPropertyBridge<MenuItem, object>(this, "Icon");
				cellIcon = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIcon.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIcon.Activate();
				}
			}
		}

		void PrepareIsCheckable()
		{
			if (bridgeIsCheckable == null)
			{
				bridgeIsCheckable = new DependencyPropertyBridge<MenuItem, bool>(this, "IsCheckable");
				cellIsCheckable = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsCheckable.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsCheckable.Activate();
				}
			}
		}

		void PrepareIsChecked()
		{
			if (bridgeIsChecked == null)
			{
				bridgeIsChecked = new DependencyPropertyBridge<MenuItem, bool>(this, "IsChecked");
				cellIsChecked = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsChecked.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsChecked.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<MenuItem, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<MenuItem, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<MenuItem, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<MenuItem, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<MenuItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<MenuItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<MenuItem, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<MenuItem, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeader != null)
			{
				bridgeHeader.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIcon != null)
			{
				bridgeIcon.Activate();
			}
			if (bridgeIsCheckable != null)
			{
				bridgeIsCheckable.Activate();
			}
			if (bridgeIsChecked != null)
			{
				bridgeIsChecked.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class MultiSelector : System.Windows.Controls.Primitives.MultiSelector
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<MultiSelector, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, string> bridgeName;

		Cell<IProperty<object>> cellSelectedItem;

		public IProperty<object> _SelectedItem_
		{
			get
			{
				PrepareSelectedItem();
				return cellSelectedItem.Value;
			}

			set
			{
				PrepareSelectedItem();
				cellSelectedItem.Value = value;
			}
		}

		public new object SelectedItem
		{
			get
			{
				PrepareSelectedItem();
				return _SelectedItem_.Value;
			}

			set
			{
				PrepareSelectedItem();
				_SelectedItem_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, object> bridgeSelectedItem;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<MultiSelector, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<MultiSelector, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<MultiSelector, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<MultiSelector, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<MultiSelector, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<MultiSelector, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<MultiSelector, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<MultiSelector, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<MultiSelector, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<MultiSelector, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<MultiSelector, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<MultiSelector, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<MultiSelector, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<MultiSelector, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<MultiSelector, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSelectedItem()
		{
			if (bridgeSelectedItem == null)
			{
				bridgeSelectedItem = new DependencyPropertyBridge<MultiSelector, object>(this, "SelectedItem");
				cellSelectedItem = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItem.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItem.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<MultiSelector, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<MultiSelector, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<MultiSelector, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSelectedItem != null)
			{
				bridgeSelectedItem.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class NavigationWindow : System.Windows.Navigation.NavigationWindow
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, string> bridgeName;

		Cell<IProperty<string>> cellTitle;

		public IProperty<string> _Title_
		{
			get
			{
				PrepareTitle();
				return cellTitle.Value;
			}

			set
			{
				PrepareTitle();
				cellTitle.Value = value;
			}
		}

		public new string Title
		{
			get
			{
				PrepareTitle();
				return _Title_.Value;
			}

			set
			{
				PrepareTitle();
				_Title_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, string> bridgeTitle;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<NavigationWindow, double> bridgeWidth;

		Cell<IProperty<System.Windows.WindowStartupLocation>> cellWindowStartupLocation;

		public IProperty<System.Windows.WindowStartupLocation> _WindowStartupLocation_
		{
			get
			{
				PrepareWindowStartupLocation();
				return cellWindowStartupLocation.Value;
			}

			set
			{
				PrepareWindowStartupLocation();
				cellWindowStartupLocation.Value = value;
			}
		}

		public new System.Windows.WindowStartupLocation WindowStartupLocation
		{
			get
			{
				PrepareWindowStartupLocation();
				return _WindowStartupLocation_.Value;
			}

			set
			{
				PrepareWindowStartupLocation();
				_WindowStartupLocation_.Value = value;
			}
		}

		RegularPropertyBridge<NavigationWindow, System.Windows.WindowStartupLocation> bridgeWindowStartupLocation;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<NavigationWindow, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<NavigationWindow, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<NavigationWindow, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<NavigationWindow, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<NavigationWindow, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<NavigationWindow, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<NavigationWindow, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<NavigationWindow, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<NavigationWindow, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<NavigationWindow, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<NavigationWindow, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<NavigationWindow, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<NavigationWindow, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTitle()
		{
			if (bridgeTitle == null)
			{
				bridgeTitle = new DependencyPropertyBridge<NavigationWindow, string>(this, "Title");
				cellTitle = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTitle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTitle.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<NavigationWindow, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<NavigationWindow, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<NavigationWindow, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		void PrepareWindowStartupLocation()
		{
			if (bridgeWindowStartupLocation == null)
			{
				bridgeWindowStartupLocation = new RegularPropertyBridge<NavigationWindow, System.Windows.WindowStartupLocation>(this, "WindowStartupLocation");
				cellWindowStartupLocation = new Cell<IProperty<System.Windows.WindowStartupLocation>>(
					new LazyCache<System.Windows.WindowStartupLocation>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWindowStartupLocation.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWindowStartupLocation.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTitle != null)
			{
				bridgeTitle.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			if (bridgeWindowStartupLocation != null)
			{
				bridgeWindowStartupLocation.Activate();
			}
			initialized = true;
		}
	}

	public class Page : System.Windows.Controls.Page
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Page, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Page, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Page, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Page, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Page, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Page, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Page, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Page, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Page, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Page, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Page, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Page, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Page, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Page, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Page, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Page, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class PageFunctionBase : System.Windows.Navigation.PageFunctionBase
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<PageFunctionBase, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<PageFunctionBase, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<PageFunctionBase, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<PageFunctionBase, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<PageFunctionBase, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<PageFunctionBase, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<PageFunctionBase, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<PageFunctionBase, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<PageFunctionBase, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<PageFunctionBase, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<PageFunctionBase, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<PageFunctionBase, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<PageFunctionBase, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<PageFunctionBase, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<PageFunctionBase, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<PageFunctionBase, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Panel : System.Windows.Controls.Panel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<Panel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Panel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Panel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Panel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Panel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Panel, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Panel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Panel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Panel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<Panel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Panel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Panel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Panel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Panel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Panel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Panel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Panel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Panel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Paragraph : System.Windows.Documents.Paragraph
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Paragraph, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Paragraph, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Paragraph, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Paragraph, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Paragraph, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Paragraph, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Paragraph, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Paragraph, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Paragraph, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Paragraph, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Paragraph, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Paragraph, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class Popup : System.Windows.Controls.Primitives.Popup
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Popup, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Popup, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Popup, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Popup, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Popup, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Popup, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Popup, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Popup, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Popup, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Popup, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Popup, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Popup, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Popup, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Popup, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Popup, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Popup, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ProgressBar : System.Windows.Controls.ProgressBar
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ProgressBar, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ProgressBar, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ProgressBar, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ProgressBar, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ProgressBar, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ProgressBar, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ProgressBar, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ProgressBar, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ProgressBar, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ProgressBar, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ProgressBar, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ProgressBar, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ProgressBar, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ProgressBar, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ProgressBar, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ProgressBar, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class RadioButton : System.Windows.Controls.RadioButton
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<RadioButton, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<System.Nullable<bool>>> cellIsChecked;

		public IProperty<System.Nullable<bool>> _IsChecked_
		{
			get
			{
				PrepareIsChecked();
				return cellIsChecked.Value;
			}

			set
			{
				PrepareIsChecked();
				cellIsChecked.Value = value;
			}
		}

		public new System.Nullable<bool> IsChecked
		{
			get
			{
				PrepareIsChecked();
				return _IsChecked_.Value;
			}

			set
			{
				PrepareIsChecked();
				_IsChecked_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Nullable<bool>> bridgeIsChecked;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<RadioButton, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<RadioButton, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<RadioButton, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<RadioButton, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<RadioButton, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<RadioButton, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<RadioButton, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<RadioButton, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<RadioButton, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<RadioButton, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<RadioButton, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<RadioButton, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsChecked()
		{
			if (bridgeIsChecked == null)
			{
				bridgeIsChecked = new DependencyPropertyBridge<RadioButton, System.Nullable<bool>>(this, "IsChecked");
				cellIsChecked = new Cell<IProperty<System.Nullable<bool>>>(
					new LazyCache<System.Nullable<bool>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsChecked.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsChecked.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<RadioButton, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<RadioButton, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<RadioButton, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<RadioButton, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<RadioButton, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<RadioButton, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsChecked != null)
			{
				bridgeIsChecked.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class RangeBase : System.Windows.Controls.Primitives.RangeBase
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<RangeBase, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<RangeBase, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<RangeBase, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<RangeBase, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<RangeBase, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<RangeBase, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<RangeBase, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<RangeBase, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<RangeBase, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<RangeBase, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<RangeBase, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<RangeBase, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<RangeBase, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<RangeBase, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<RangeBase, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<RangeBase, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class RepeatButton : System.Windows.Controls.Primitives.RepeatButton
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<RepeatButton, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<RepeatButton, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<RepeatButton, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<RepeatButton, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<RepeatButton, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<RepeatButton, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<RepeatButton, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<RepeatButton, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<RepeatButton, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<RepeatButton, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<RepeatButton, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<RepeatButton, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<RepeatButton, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<RepeatButton, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<RepeatButton, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<RepeatButton, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<RepeatButton, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<RepeatButton, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<RepeatButton, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ResizeGrip : System.Windows.Controls.Primitives.ResizeGrip
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ResizeGrip, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ResizeGrip, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ResizeGrip, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ResizeGrip, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ResizeGrip, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ResizeGrip, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ResizeGrip, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ResizeGrip, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ResizeGrip, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ResizeGrip, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ResizeGrip, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ResizeGrip, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ResizeGrip, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ResizeGrip, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ResizeGrip, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ResizeGrip, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class RichTextBox : System.Windows.Controls.RichTextBox
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, bool> bridgeIsEnabled;

		Cell<IProperty<bool>> cellIsReadOnly;

		public IProperty<bool> _IsReadOnly_
		{
			get
			{
				PrepareIsReadOnly();
				return cellIsReadOnly.Value;
			}

			set
			{
				PrepareIsReadOnly();
				cellIsReadOnly.Value = value;
			}
		}

		public new bool IsReadOnly
		{
			get
			{
				PrepareIsReadOnly();
				return _IsReadOnly_.Value;
			}

			set
			{
				PrepareIsReadOnly();
				_IsReadOnly_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, bool> bridgeIsReadOnly;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<RichTextBox, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<RichTextBox, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<RichTextBox, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<RichTextBox, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<RichTextBox, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<RichTextBox, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<RichTextBox, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<RichTextBox, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<RichTextBox, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<RichTextBox, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<RichTextBox, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareIsReadOnly()
		{
			if (bridgeIsReadOnly == null)
			{
				bridgeIsReadOnly = new DependencyPropertyBridge<RichTextBox, bool>(this, "IsReadOnly");
				cellIsReadOnly = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsReadOnly.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsReadOnly.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<RichTextBox, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<RichTextBox, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<RichTextBox, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<RichTextBox, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<RichTextBox, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeIsReadOnly != null)
			{
				bridgeIsReadOnly.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class RowDefinition : System.Windows.Controls.RowDefinition
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<RowDefinition, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<RowDefinition, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.GridLength>> cellHeight;

		public IProperty<System.Windows.GridLength> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new System.Windows.GridLength Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<RowDefinition, System.Windows.GridLength> bridgeHeight;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<RowDefinition, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<RowDefinition, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<RowDefinition, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<RowDefinition, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<RowDefinition, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<RowDefinition, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<RowDefinition, System.Windows.GridLength>(this, "Height");
				cellHeight = new Cell<IProperty<System.Windows.GridLength>>(
					new LazyCache<System.Windows.GridLength>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<RowDefinition, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<RowDefinition, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<RowDefinition, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<RowDefinition, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class Run : System.Windows.Documents.Run
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Run, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Run, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Run, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Run, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Run, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Run, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Run, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Run, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Run, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Run, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Run, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Run, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class ScrollBar : System.Windows.Controls.Primitives.ScrollBar
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollBar, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ScrollBar, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ScrollBar, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ScrollBar, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ScrollBar, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ScrollBar, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ScrollBar, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ScrollBar, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ScrollBar, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ScrollBar, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ScrollBar, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ScrollBar, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ScrollBar, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ScrollBar, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ScrollBar, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ScrollBar, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ScrollViewer : System.Windows.Controls.ScrollViewer
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ScrollViewer, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ScrollViewer, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<ScrollViewer, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ScrollViewer, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ScrollViewer, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ScrollViewer, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ScrollViewer, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ScrollViewer, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ScrollViewer, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ScrollViewer, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ScrollViewer, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ScrollViewer, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ScrollViewer, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ScrollViewer, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ScrollViewer, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ScrollViewer, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ScrollViewer, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Section : System.Windows.Documents.Section
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Section, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Section, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Section, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Section, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Section, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Section, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Section, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Section, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Section, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Section, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Section, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Section, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class SelectiveScrollingGrid : System.Windows.Controls.Primitives.SelectiveScrollingGrid
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<SelectiveScrollingGrid, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>>> cellColumnDefinitions;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>> _ColumnDefinitions_
		{
			get
			{
				PrepareColumnDefinitions();
				return cellColumnDefinitions.Value;
			}

			set
			{
				PrepareColumnDefinitions();
				cellColumnDefinitions.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition> ColumnDefinitions
		{
			get
			{
				PrepareColumnDefinitions();
				return _ColumnDefinitions_.Value;
			}

			set
			{
				PrepareColumnDefinitions();
				_ColumnDefinitions_.Value = value;
			}
		}

		CollectionBridge<SelectiveScrollingGrid, System.Windows.Controls.ColumnDefinition> bridgeColumnDefinitions;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<SelectiveScrollingGrid, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<SelectiveScrollingGrid, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<SelectiveScrollingGrid, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<SelectiveScrollingGrid, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<SelectiveScrollingGrid, string> bridgeName;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>>> cellRowDefinitions;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>> _RowDefinitions_
		{
			get
			{
				PrepareRowDefinitions();
				return cellRowDefinitions.Value;
			}

			set
			{
				PrepareRowDefinitions();
				cellRowDefinitions.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition> RowDefinitions
		{
			get
			{
				PrepareRowDefinitions();
				return _RowDefinitions_.Value;
			}

			set
			{
				PrepareRowDefinitions();
				_RowDefinitions_.Value = value;
			}
		}

		CollectionBridge<SelectiveScrollingGrid, System.Windows.Controls.RowDefinition> bridgeRowDefinitions;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<SelectiveScrollingGrid, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<SelectiveScrollingGrid, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<SelectiveScrollingGrid, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<SelectiveScrollingGrid, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareColumnDefinitions()
		{
			if (bridgeColumnDefinitions == null)
			{
				bridgeColumnDefinitions = new CollectionBridge<SelectiveScrollingGrid, System.Windows.Controls.ColumnDefinition>(this, "ColumnDefinitions");				
				cellColumnDefinitions = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeColumnDefinitions.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeColumnDefinitions.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<SelectiveScrollingGrid, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<SelectiveScrollingGrid, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<SelectiveScrollingGrid, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<SelectiveScrollingGrid, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<SelectiveScrollingGrid, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareRowDefinitions()
		{
			if (bridgeRowDefinitions == null)
			{
				bridgeRowDefinitions = new CollectionBridge<SelectiveScrollingGrid, System.Windows.Controls.RowDefinition>(this, "RowDefinitions");				
				cellRowDefinitions = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeRowDefinitions.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeRowDefinitions.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<SelectiveScrollingGrid, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<SelectiveScrollingGrid, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<SelectiveScrollingGrid, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeColumnDefinitions != null)
			{
				bridgeColumnDefinitions.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeRowDefinitions != null)
			{
				bridgeRowDefinitions.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Selector : System.Windows.Controls.Primitives.Selector
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<Selector, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, string> bridgeName;

		Cell<IProperty<object>> cellSelectedItem;

		public IProperty<object> _SelectedItem_
		{
			get
			{
				PrepareSelectedItem();
				return cellSelectedItem.Value;
			}

			set
			{
				PrepareSelectedItem();
				cellSelectedItem.Value = value;
			}
		}

		public new object SelectedItem
		{
			get
			{
				PrepareSelectedItem();
				return _SelectedItem_.Value;
			}

			set
			{
				PrepareSelectedItem();
				_SelectedItem_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, object> bridgeSelectedItem;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Selector, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Selector, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Selector, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Selector, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Selector, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Selector, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Selector, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Selector, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Selector, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Selector, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Selector, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<Selector, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<Selector, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Selector, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Selector, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSelectedItem()
		{
			if (bridgeSelectedItem == null)
			{
				bridgeSelectedItem = new DependencyPropertyBridge<Selector, object>(this, "SelectedItem");
				cellSelectedItem = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItem.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItem.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Selector, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Selector, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Selector, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSelectedItem != null)
			{
				bridgeSelectedItem.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Separator : System.Windows.Controls.Separator
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Separator, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Separator, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Separator, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Separator, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Separator, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Separator, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Separator, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Separator, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Separator, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Separator, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Separator, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Separator, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Separator, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Separator, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Separator, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Separator, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Slider : System.Windows.Controls.Slider
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Slider, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Slider, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Slider, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Slider, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Slider, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Slider, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Slider, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Slider, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Slider, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Slider, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Slider, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Slider, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Slider, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Slider, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Slider, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Slider, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Span : System.Windows.Documents.Span
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Span, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Span, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Span, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Span, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Span, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Span, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Span, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Span, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Span, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Span, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Span, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Span, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class StackPanel : System.Windows.Controls.StackPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<StackPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, string> bridgeName;

		Cell<IProperty<System.Windows.Controls.Orientation>> cellOrientation;

		public IProperty<System.Windows.Controls.Orientation> _Orientation_
		{
			get
			{
				PrepareOrientation();
				return cellOrientation.Value;
			}

			set
			{
				PrepareOrientation();
				cellOrientation.Value = value;
			}
		}

		public new System.Windows.Controls.Orientation Orientation
		{
			get
			{
				PrepareOrientation();
				return _Orientation_.Value;
			}

			set
			{
				PrepareOrientation();
				_Orientation_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, System.Windows.Controls.Orientation> bridgeOrientation;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<StackPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<StackPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<StackPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<StackPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<StackPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<StackPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<StackPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareOrientation()
		{
			if (bridgeOrientation == null)
			{
				bridgeOrientation = new DependencyPropertyBridge<StackPanel, System.Windows.Controls.Orientation>(this, "Orientation");
				cellOrientation = new Cell<IProperty<System.Windows.Controls.Orientation>>(
					new LazyCache<System.Windows.Controls.Orientation>(() =>
					{
						using (new Snapshot())
						{
							return bridgeOrientation.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeOrientation.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<StackPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<StackPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<StackPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeOrientation != null)
			{
				bridgeOrientation.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class StatusBar : System.Windows.Controls.Primitives.StatusBar
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<StatusBar, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBar, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<StatusBar, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<StatusBar, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<StatusBar, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<StatusBar, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<StatusBar, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<StatusBar, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<StatusBar, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<StatusBar, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<StatusBar, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<StatusBar, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<StatusBar, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<StatusBar, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<StatusBar, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<StatusBar, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<StatusBar, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<StatusBar, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<StatusBar, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class StatusBarItem : System.Windows.Controls.Primitives.StatusBarItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<StatusBarItem, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<StatusBarItem, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<StatusBarItem, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<StatusBarItem, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<StatusBarItem, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<StatusBarItem, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<StatusBarItem, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<StatusBarItem, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<StatusBarItem, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<StatusBarItem, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<StatusBarItem, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<StatusBarItem, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<StatusBarItem, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<StatusBarItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<StatusBarItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<StatusBarItem, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<StatusBarItem, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class TabControl : System.Windows.Controls.TabControl
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<TabControl, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, string> bridgeName;

		Cell<IProperty<object>> cellSelectedItem;

		public IProperty<object> _SelectedItem_
		{
			get
			{
				PrepareSelectedItem();
				return cellSelectedItem.Value;
			}

			set
			{
				PrepareSelectedItem();
				cellSelectedItem.Value = value;
			}
		}

		public new object SelectedItem
		{
			get
			{
				PrepareSelectedItem();
				return _SelectedItem_.Value;
			}

			set
			{
				PrepareSelectedItem();
				_SelectedItem_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, object> bridgeSelectedItem;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<TabControl, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<TabControl, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<TabControl, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<TabControl, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<TabControl, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<TabControl, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<TabControl, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<TabControl, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<TabControl, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<TabControl, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<TabControl, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<TabControl, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<TabControl, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<TabControl, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TabControl, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSelectedItem()
		{
			if (bridgeSelectedItem == null)
			{
				bridgeSelectedItem = new DependencyPropertyBridge<TabControl, object>(this, "SelectedItem");
				cellSelectedItem = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItem.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItem.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TabControl, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<TabControl, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<TabControl, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSelectedItem != null)
			{
				bridgeSelectedItem.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class TabItem : System.Windows.Controls.TabItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<object>> cellHeader;

		public IProperty<object> _Header_
		{
			get
			{
				PrepareHeader();
				return cellHeader.Value;
			}

			set
			{
				PrepareHeader();
				cellHeader.Value = value;
			}
		}

		public new object Header
		{
			get
			{
				PrepareHeader();
				return _Header_.Value;
			}

			set
			{
				PrepareHeader();
				_Header_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, object> bridgeHeader;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<TabItem, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<TabItem, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<TabItem, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<TabItem, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<TabItem, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<TabItem, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<TabItem, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<TabItem, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<TabItem, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeader()
		{
			if (bridgeHeader == null)
			{
				bridgeHeader = new DependencyPropertyBridge<TabItem, object>(this, "Header");
				cellHeader = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeader.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeader.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<TabItem, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<TabItem, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<TabItem, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<TabItem, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TabItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TabItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<TabItem, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<TabItem, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeader != null)
			{
				bridgeHeader.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Table : System.Windows.Documents.Table
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Table, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Table, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Table, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Table, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Table, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Table, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Table, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Table, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Table, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Table, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Table, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Table, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class TableCell : System.Windows.Documents.TableCell
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<TableCell, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<TableCell, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<TableCell, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TableCell, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<TableCell, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TableCell, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<TableCell, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<TableCell, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<TableCell, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TableCell, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<TableCell, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TableCell, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class TableColumn : System.Windows.Documents.TableColumn
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<TableColumn, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<TableColumn, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<TableColumn, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TableColumn, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<TableColumn, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TableColumn, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<TableColumn, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<TableColumn, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<TableColumn, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TableColumn, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<TableColumn, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TableColumn, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class TableRow : System.Windows.Documents.TableRow
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRow, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRow, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRow, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRow, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRow, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRow, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<TableRow, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<TableRow, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<TableRow, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TableRow, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<TableRow, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TableRow, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class TableRowGroup : System.Windows.Documents.TableRowGroup
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRowGroup, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRowGroup, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRowGroup, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRowGroup, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRowGroup, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TableRowGroup, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<TableRowGroup, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<TableRowGroup, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<TableRowGroup, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TableRowGroup, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<TableRowGroup, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TableRowGroup, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class TabPanel : System.Windows.Controls.Primitives.TabPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<TabPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<TabPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TabPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<TabPanel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<TabPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TabPanel, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TabPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TabPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<TabPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<TabPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<TabPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<TabPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<TabPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<TabPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TabPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TabPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<TabPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<TabPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class TextBlock : System.Windows.Controls.TextBlock
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, string> bridgeName;

		Cell<IProperty<System.Windows.Thickness>> cellPadding;

		public IProperty<System.Windows.Thickness> _Padding_
		{
			get
			{
				PreparePadding();
				return cellPadding.Value;
			}

			set
			{
				PreparePadding();
				cellPadding.Value = value;
			}
		}

		public new System.Windows.Thickness Padding
		{
			get
			{
				PreparePadding();
				return _Padding_.Value;
			}

			set
			{
				PreparePadding();
				_Padding_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, System.Windows.Thickness> bridgePadding;

		Cell<IProperty<string>> cellText;

		public IProperty<string> _Text_
		{
			get
			{
				PrepareText();
				return cellText.Value;
			}

			set
			{
				PrepareText();
				cellText.Value = value;
			}
		}

		public new string Text
		{
			get
			{
				PrepareText();
				return _Text_.Value;
			}

			set
			{
				PrepareText();
				_Text_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, string> bridgeText;

		Cell<IProperty<System.Windows.TextAlignment>> cellTextAlignment;

		public IProperty<System.Windows.TextAlignment> _TextAlignment_
		{
			get
			{
				PrepareTextAlignment();
				return cellTextAlignment.Value;
			}

			set
			{
				PrepareTextAlignment();
				cellTextAlignment.Value = value;
			}
		}

		public new System.Windows.TextAlignment TextAlignment
		{
			get
			{
				PrepareTextAlignment();
				return _TextAlignment_.Value;
			}

			set
			{
				PrepareTextAlignment();
				_TextAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, System.Windows.TextAlignment> bridgeTextAlignment;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBlock, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<TextBlock, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<TextBlock, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<TextBlock, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<TextBlock, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<TextBlock, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<TextBlock, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<TextBlock, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TextBlock, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PreparePadding()
		{
			if (bridgePadding == null)
			{
				bridgePadding = new DependencyPropertyBridge<TextBlock, System.Windows.Thickness>(this, "Padding");
				cellPadding = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgePadding.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgePadding.Activate();
				}
			}
		}

		void PrepareText()
		{
			if (bridgeText == null)
			{
				bridgeText = new DependencyPropertyBridge<TextBlock, string>(this, "Text");
				cellText = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeText.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeText.Activate();
				}
			}
		}

		void PrepareTextAlignment()
		{
			if (bridgeTextAlignment == null)
			{
				bridgeTextAlignment = new DependencyPropertyBridge<TextBlock, System.Windows.TextAlignment>(this, "TextAlignment");
				cellTextAlignment = new Cell<IProperty<System.Windows.TextAlignment>>(
					new LazyCache<System.Windows.TextAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTextAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTextAlignment.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TextBlock, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<TextBlock, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<TextBlock, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgePadding != null)
			{
				bridgePadding.Activate();
			}
			if (bridgeText != null)
			{
				bridgeText.Activate();
			}
			if (bridgeTextAlignment != null)
			{
				bridgeTextAlignment.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class TextBox : System.Windows.Controls.TextBox
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, bool> bridgeIsEnabled;

		Cell<IProperty<bool>> cellIsReadOnly;

		public IProperty<bool> _IsReadOnly_
		{
			get
			{
				PrepareIsReadOnly();
				return cellIsReadOnly.Value;
			}

			set
			{
				PrepareIsReadOnly();
				cellIsReadOnly.Value = value;
			}
		}

		public new bool IsReadOnly
		{
			get
			{
				PrepareIsReadOnly();
				return _IsReadOnly_.Value;
			}

			set
			{
				PrepareIsReadOnly();
				_IsReadOnly_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, bool> bridgeIsReadOnly;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, string> bridgeName;

		Cell<IProperty<string>> cellText;

		public IProperty<string> _Text_
		{
			get
			{
				PrepareText();
				return cellText.Value;
			}

			set
			{
				PrepareText();
				cellText.Value = value;
			}
		}

		public new string Text
		{
			get
			{
				PrepareText();
				return _Text_.Value;
			}

			set
			{
				PrepareText();
				_Text_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, string> bridgeText;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<TextBox, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<TextBox, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<TextBox, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<TextBox, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<TextBox, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<TextBox, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<TextBox, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<TextBox, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<TextBox, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<TextBox, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<TextBox, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareIsReadOnly()
		{
			if (bridgeIsReadOnly == null)
			{
				bridgeIsReadOnly = new DependencyPropertyBridge<TextBox, bool>(this, "IsReadOnly");
				cellIsReadOnly = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsReadOnly.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsReadOnly.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<TextBox, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TextBox, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareText()
		{
			if (bridgeText == null)
			{
				bridgeText = new DependencyPropertyBridge<TextBox, string>(this, "Text");
				cellText = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeText.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeText.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TextBox, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<TextBox, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<TextBox, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeIsReadOnly != null)
			{
				bridgeIsReadOnly.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeText != null)
			{
				bridgeText.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Thumb : System.Windows.Controls.Primitives.Thumb
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Thumb, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Thumb, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Thumb, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Thumb, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Thumb, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Thumb, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Thumb, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Thumb, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Thumb, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Thumb, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Thumb, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Thumb, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Thumb, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Thumb, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Thumb, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Thumb, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class TickBar : System.Windows.Controls.Primitives.TickBar
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<TickBar, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TickBar, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<TickBar, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<TickBar, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TickBar, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TickBar, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TickBar, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<TickBar, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<TickBar, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<TickBar, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<TickBar, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<TickBar, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TickBar, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TickBar, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<TickBar, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<TickBar, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ToggleButton : System.Windows.Controls.Primitives.ToggleButton
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.RoutedEventHandler>> cellClick;

		public IProperty<System.Windows.RoutedEventHandler> _Click_
		{
			get
			{
				PrepareClick();
				return cellClick.Value;
			}

			set
			{
				PrepareClick();
				cellClick.Value = value;
			}
		}

		public new System.Windows.RoutedEventHandler Click
		{
			get
			{
				PrepareClick();
				return _Click_.Value;
			}

			set
			{
				PrepareClick();
				_Click_.Value = value;
			}
		}

        EventBridge<ToggleButton, System.Windows.RoutedEventHandler> bridgeClick;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<System.Nullable<bool>>> cellIsChecked;

		public IProperty<System.Nullable<bool>> _IsChecked_
		{
			get
			{
				PrepareIsChecked();
				return cellIsChecked.Value;
			}

			set
			{
				PrepareIsChecked();
				cellIsChecked.Value = value;
			}
		}

		public new System.Nullable<bool> IsChecked
		{
			get
			{
				PrepareIsChecked();
				return _IsChecked_.Value;
			}

			set
			{
				PrepareIsChecked();
				_IsChecked_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Nullable<bool>> bridgeIsChecked;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ToggleButton, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ToggleButton, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareClick()
		{
			if (bridgeClick == null)
			{
				bridgeClick = new EventBridge<ToggleButton, System.Windows.RoutedEventHandler>(this, "Click");
				cellClick = new Cell<IProperty<System.Windows.RoutedEventHandler>>(
					new Cell<System.Windows.RoutedEventHandler>()
				);
				if (initialized)
				{
					bridgeClick.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<ToggleButton, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ToggleButton, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ToggleButton, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ToggleButton, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ToggleButton, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ToggleButton, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ToggleButton, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ToggleButton, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ToggleButton, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsChecked()
		{
			if (bridgeIsChecked == null)
			{
				bridgeIsChecked = new DependencyPropertyBridge<ToggleButton, System.Nullable<bool>>(this, "IsChecked");
				cellIsChecked = new Cell<IProperty<System.Nullable<bool>>>(
					new LazyCache<System.Nullable<bool>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsChecked.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsChecked.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ToggleButton, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ToggleButton, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ToggleButton, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ToggleButton, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ToggleButton, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ToggleButton, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeClick != null)
			{
				bridgeClick.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsChecked != null)
			{
				bridgeIsChecked.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ToolBar : System.Windows.Controls.ToolBar
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<object>> cellHeader;

		public IProperty<object> _Header_
		{
			get
			{
				PrepareHeader();
				return cellHeader.Value;
			}

			set
			{
				PrepareHeader();
				cellHeader.Value = value;
			}
		}

		public new object Header
		{
			get
			{
				PrepareHeader();
				return _Header_.Value;
			}

			set
			{
				PrepareHeader();
				_Header_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, object> bridgeHeader;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<ToolBar, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBar, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ToolBar, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ToolBar, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ToolBar, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ToolBar, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ToolBar, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ToolBar, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ToolBar, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeader()
		{
			if (bridgeHeader == null)
			{
				bridgeHeader = new DependencyPropertyBridge<ToolBar, object>(this, "Header");
				cellHeader = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeader.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeader.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ToolBar, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ToolBar, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ToolBar, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<ToolBar, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<ToolBar, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ToolBar, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ToolBar, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ToolBar, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ToolBar, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ToolBar, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeader != null)
			{
				bridgeHeader.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ToolBarOverflowPanel : System.Windows.Controls.Primitives.ToolBarOverflowPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<ToolBarOverflowPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarOverflowPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarOverflowPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarOverflowPanel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarOverflowPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarOverflowPanel, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarOverflowPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarOverflowPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarOverflowPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<ToolBarOverflowPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ToolBarOverflowPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ToolBarOverflowPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ToolBarOverflowPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ToolBarOverflowPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ToolBarOverflowPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ToolBarOverflowPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ToolBarOverflowPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ToolBarOverflowPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ToolBarPanel : System.Windows.Controls.Primitives.ToolBarPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<ToolBarPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, string> bridgeName;

		Cell<IProperty<System.Windows.Controls.Orientation>> cellOrientation;

		public IProperty<System.Windows.Controls.Orientation> _Orientation_
		{
			get
			{
				PrepareOrientation();
				return cellOrientation.Value;
			}

			set
			{
				PrepareOrientation();
				cellOrientation.Value = value;
			}
		}

		public new System.Windows.Controls.Orientation Orientation
		{
			get
			{
				PrepareOrientation();
				return _Orientation_.Value;
			}

			set
			{
				PrepareOrientation();
				_Orientation_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, System.Windows.Controls.Orientation> bridgeOrientation;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<ToolBarPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ToolBarPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ToolBarPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ToolBarPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ToolBarPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ToolBarPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareOrientation()
		{
			if (bridgeOrientation == null)
			{
				bridgeOrientation = new DependencyPropertyBridge<ToolBarPanel, System.Windows.Controls.Orientation>(this, "Orientation");
				cellOrientation = new Cell<IProperty<System.Windows.Controls.Orientation>>(
					new LazyCache<System.Windows.Controls.Orientation>(() =>
					{
						using (new Snapshot())
						{
							return bridgeOrientation.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeOrientation.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ToolBarPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ToolBarPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ToolBarPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeOrientation != null)
			{
				bridgeOrientation.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ToolBarTray : System.Windows.Controls.ToolBarTray
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarTray, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarTray, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarTray, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarTray, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarTray, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarTray, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarTray, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolBarTray, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ToolBarTray, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ToolBarTray, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ToolBarTray, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ToolBarTray, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ToolBarTray, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<ToolBarTray, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ToolBarTray, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ToolBarTray, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class ToolTip : System.Windows.Controls.ToolTip
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, string> bridgeName;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<ToolTip, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<ToolTip, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<ToolTip, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<ToolTip, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<ToolTip, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<ToolTip, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<ToolTip, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<ToolTip, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<ToolTip, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<ToolTip, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<ToolTip, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<ToolTip, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<ToolTip, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<ToolTip, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<ToolTip, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<ToolTip, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Track : System.Windows.Controls.Primitives.Track
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Track, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Track, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Track, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Track, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Track, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Track, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Track, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Track, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Track, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Track, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Track, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Track, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Track, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Track, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Track, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Track, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class TreeView : System.Windows.Controls.TreeView
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, bool> bridgeIsEnabled;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<TreeView, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, string> bridgeName;

		Cell<IProperty<object>> cellSelectedItem;

		public IProperty<object> _SelectedItem_
		{
			get
			{
				PrepareSelectedItem();
				return cellSelectedItem.Value;
			}

			set
			{
				PrepareSelectedItem();
				cellSelectedItem.Value = value;
			}
		}

		public new object SelectedItem
		{
			get
			{
				PrepareSelectedItem();
				return _SelectedItem_.Value;
			}

			set
			{
				PrepareSelectedItem();
				_SelectedItem_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, object> bridgeSelectedItem;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeView, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<TreeView, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<TreeView, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<TreeView, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<TreeView, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<TreeView, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<TreeView, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<TreeView, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<TreeView, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<TreeView, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<TreeView, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<TreeView, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<TreeView, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<TreeView, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TreeView, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareSelectedItem()
		{
			if (bridgeSelectedItem == null)
			{
				bridgeSelectedItem = new DependencyPropertyBridge<TreeView, object>(this, "SelectedItem");
				cellSelectedItem = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeSelectedItem.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeSelectedItem.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TreeView, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<TreeView, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<TreeView, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeSelectedItem != null)
			{
				bridgeSelectedItem.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class TreeViewItem : System.Windows.Controls.TreeViewItem
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<object>> cellHeader;

		public IProperty<object> _Header_
		{
			get
			{
				PrepareHeader();
				return cellHeader.Value;
			}

			set
			{
				PrepareHeader();
				cellHeader.Value = value;
			}
		}

		public new object Header
		{
			get
			{
				PrepareHeader();
				return _Header_.Value;
			}

			set
			{
				PrepareHeader();
				_Header_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, object> bridgeHeader;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, bool> bridgeIsEnabled;

		Cell<IProperty<bool>> cellIsSelected;

		public IProperty<bool> _IsSelected_
		{
			get
			{
				PrepareIsSelected();
				return cellIsSelected.Value;
			}

			set
			{
				PrepareIsSelected();
				cellIsSelected.Value = value;
			}
		}

		public new bool IsSelected
		{
			get
			{
				PrepareIsSelected();
				return _IsSelected_.Value;
			}

			set
			{
				PrepareIsSelected();
				_IsSelected_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, bool> bridgeIsSelected;

		Cell<IProperty<System.Collections.Generic.IEnumerable<object>>> cellItems;

		public IProperty<System.Collections.Generic.IEnumerable<object>> _Items_
		{
			get
			{
				PrepareItems();
				return cellItems.Value;
			}

			set
			{
				PrepareItems();
				cellItems.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<object> Items
		{
			get
			{
				PrepareItems();
				return _Items_.Value;
			}

			set
			{
				PrepareItems();
				_Items_.Value = value;
			}
		}

		CollectionBridge<TreeViewItem, object> bridgeItems;

		Cell<IProperty<System.Windows.DataTemplate>> cellItemTemplate;

		public IProperty<System.Windows.DataTemplate> _ItemTemplate_
		{
			get
			{
				PrepareItemTemplate();
				return cellItemTemplate.Value;
			}

			set
			{
				PrepareItemTemplate();
				cellItemTemplate.Value = value;
			}
		}

		public new System.Windows.DataTemplate ItemTemplate
		{
			get
			{
				PrepareItemTemplate();
				return _ItemTemplate_.Value;
			}

			set
			{
				PrepareItemTemplate();
				_ItemTemplate_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.DataTemplate> bridgeItemTemplate;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<TreeViewItem, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<TreeViewItem, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<TreeViewItem, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<TreeViewItem, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<TreeViewItem, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<TreeViewItem, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<TreeViewItem, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<TreeViewItem, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeader()
		{
			if (bridgeHeader == null)
			{
				bridgeHeader = new DependencyPropertyBridge<TreeViewItem, object>(this, "Header");
				cellHeader = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeader.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeader.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<TreeViewItem, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<TreeViewItem, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<TreeViewItem, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareIsSelected()
		{
			if (bridgeIsSelected == null)
			{
				bridgeIsSelected = new DependencyPropertyBridge<TreeViewItem, bool>(this, "IsSelected");
				cellIsSelected = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsSelected.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsSelected.Activate();
				}
			}
		}

		void PrepareItems()
		{
			if (bridgeItems == null)
			{
				bridgeItems = new CollectionBridge<TreeViewItem, object>(this, "Items");				
				cellItems = new Cell<IProperty<System.Collections.Generic.IEnumerable<object>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<object>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItems.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItems.Activate();
				}
			}
		}

		void PrepareItemTemplate()
		{
			if (bridgeItemTemplate == null)
			{
				bridgeItemTemplate = new DependencyPropertyBridge<TreeViewItem, System.Windows.DataTemplate>(this, "ItemTemplate");
				cellItemTemplate = new Cell<IProperty<System.Windows.DataTemplate>>(
					new LazyCache<System.Windows.DataTemplate>(() =>
					{
						using (new Snapshot())
						{
							return bridgeItemTemplate.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeItemTemplate.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<TreeViewItem, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<TreeViewItem, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<TreeViewItem, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<TreeViewItem, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<TreeViewItem, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeader != null)
			{
				bridgeHeader.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeIsSelected != null)
			{
				bridgeIsSelected.Activate();
			}
			if (bridgeItems != null)
			{
				bridgeItems.Activate();
			}
			if (bridgeItemTemplate != null)
			{
				bridgeItemTemplate.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Underline : System.Windows.Documents.Underline
	{
		bool initialized;

		Cell<IProperty<System.Windows.Controls.ContextMenu>> cellContextMenu;

		public IProperty<System.Windows.Controls.ContextMenu> _ContextMenu_
		{
			get
			{
				PrepareContextMenu();
				return cellContextMenu.Value;
			}

			set
			{
				PrepareContextMenu();
				cellContextMenu.Value = value;
			}
		}

		public new System.Windows.Controls.ContextMenu ContextMenu
		{
			get
			{
				PrepareContextMenu();
				return _ContextMenu_.Value;
			}

			set
			{
				PrepareContextMenu();
				_ContextMenu_.Value = value;
			}
		}

		DependencyPropertyBridge<Underline, System.Windows.Controls.ContextMenu> bridgeContextMenu;

		Cell<IProperty<System.Windows.Input.Cursor>> cellCursor;

		public IProperty<System.Windows.Input.Cursor> _Cursor_
		{
			get
			{
				PrepareCursor();
				return cellCursor.Value;
			}

			set
			{
				PrepareCursor();
				cellCursor.Value = value;
			}
		}

		public new System.Windows.Input.Cursor Cursor
		{
			get
			{
				PrepareCursor();
				return _Cursor_.Value;
			}

			set
			{
				PrepareCursor();
				_Cursor_.Value = value;
			}
		}

		DependencyPropertyBridge<Underline, System.Windows.Input.Cursor> bridgeCursor;

		Cell<IProperty<System.Windows.Markup.XmlLanguage>> cellLanguage;

		public IProperty<System.Windows.Markup.XmlLanguage> _Language_
		{
			get
			{
				PrepareLanguage();
				return cellLanguage.Value;
			}

			set
			{
				PrepareLanguage();
				cellLanguage.Value = value;
			}
		}

		public new System.Windows.Markup.XmlLanguage Language
		{
			get
			{
				PrepareLanguage();
				return _Language_.Value;
			}

			set
			{
				PrepareLanguage();
				_Language_.Value = value;
			}
		}

		DependencyPropertyBridge<Underline, System.Windows.Markup.XmlLanguage> bridgeLanguage;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Underline, string> bridgeName;

		Cell<IProperty<object>> cellTag;

		public IProperty<object> _Tag_
		{
			get
			{
				PrepareTag();
				return cellTag.Value;
			}

			set
			{
				PrepareTag();
				cellTag.Value = value;
			}
		}

		public new object Tag
		{
			get
			{
				PrepareTag();
				return _Tag_.Value;
			}

			set
			{
				PrepareTag();
				_Tag_.Value = value;
			}
		}

		DependencyPropertyBridge<Underline, object> bridgeTag;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Underline, object> bridgeToolTip;


		void PrepareContextMenu()
		{
			if (bridgeContextMenu == null)
			{
				bridgeContextMenu = new DependencyPropertyBridge<Underline, System.Windows.Controls.ContextMenu>(this, "ContextMenu");
				cellContextMenu = new Cell<IProperty<System.Windows.Controls.ContextMenu>>(
					new LazyCache<System.Windows.Controls.ContextMenu>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContextMenu.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContextMenu.Activate();
				}
			}
		}

		void PrepareCursor()
		{
			if (bridgeCursor == null)
			{
				bridgeCursor = new DependencyPropertyBridge<Underline, System.Windows.Input.Cursor>(this, "Cursor");
				cellCursor = new Cell<IProperty<System.Windows.Input.Cursor>>(
					new LazyCache<System.Windows.Input.Cursor>(() =>
					{
						using (new Snapshot())
						{
							return bridgeCursor.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeCursor.Activate();
				}
			}
		}

		void PrepareLanguage()
		{
			if (bridgeLanguage == null)
			{
				bridgeLanguage = new DependencyPropertyBridge<Underline, System.Windows.Markup.XmlLanguage>(this, "Language");
				cellLanguage = new Cell<IProperty<System.Windows.Markup.XmlLanguage>>(
					new LazyCache<System.Windows.Markup.XmlLanguage>(() =>
					{
						using (new Snapshot())
						{
							return bridgeLanguage.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeLanguage.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Underline, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTag()
		{
			if (bridgeTag == null)
			{
				bridgeTag = new DependencyPropertyBridge<Underline, object>(this, "Tag");
				cellTag = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTag.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTag.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Underline, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeContextMenu != null)
			{
				bridgeContextMenu.Activate();
			}
			if (bridgeCursor != null)
			{
				bridgeCursor.Activate();
			}
			if (bridgeLanguage != null)
			{
				bridgeLanguage.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTag != null)
			{
				bridgeTag.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			initialized = true;
		}
	}

	public class UniformGrid : System.Windows.Controls.Primitives.UniformGrid
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<UniformGrid, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<UniformGrid, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<UniformGrid, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<UniformGrid, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<UniformGrid, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<UniformGrid, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<UniformGrid, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<UniformGrid, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<UniformGrid, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<UniformGrid, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<UniformGrid, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<UniformGrid, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<UniformGrid, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<UniformGrid, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<UniformGrid, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<UniformGrid, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<UniformGrid, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<UniformGrid, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class UserControl : System.Windows.Controls.UserControl
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<UserControl, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<UserControl, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<UserControl, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<UserControl, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<UserControl, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<UserControl, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<UserControl, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<UserControl, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<UserControl, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<UserControl, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<UserControl, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<UserControl, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<UserControl, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<UserControl, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<UserControl, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<UserControl, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<UserControl, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Viewbox : System.Windows.Controls.Viewbox
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewbox, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewbox, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewbox, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewbox, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewbox, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewbox, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewbox, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewbox, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Viewbox, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Viewbox, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Viewbox, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Viewbox, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Viewbox, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Viewbox, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Viewbox, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Viewbox, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Viewport3D : System.Windows.Controls.Viewport3D
	{
		bool initialized;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewport3D, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewport3D, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewport3D, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewport3D, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewport3D, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewport3D, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewport3D, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Viewport3D, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Viewport3D, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Viewport3D, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Viewport3D, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Viewport3D, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Viewport3D, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Viewport3D, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Viewport3D, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Viewport3D, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class VirtualizingPanel : System.Windows.Controls.VirtualizingPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<VirtualizingPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingPanel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingPanel, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<VirtualizingPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<VirtualizingPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<VirtualizingPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<VirtualizingPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<VirtualizingPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<VirtualizingPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<VirtualizingPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<VirtualizingPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<VirtualizingPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class VirtualizingStackPanel : System.Windows.Controls.VirtualizingStackPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<VirtualizingStackPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingStackPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingStackPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingStackPanel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingStackPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingStackPanel, string> bridgeName;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingStackPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingStackPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<VirtualizingStackPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<VirtualizingStackPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<VirtualizingStackPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<VirtualizingStackPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<VirtualizingStackPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<VirtualizingStackPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<VirtualizingStackPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<VirtualizingStackPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<VirtualizingStackPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<VirtualizingStackPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}

	public class Window : System.Windows.Window
	{
		bool initialized;

		Cell<IProperty<System.Windows.Media.Brush>> cellBackground;

		public IProperty<System.Windows.Media.Brush> _Background_
		{
			get
			{
				PrepareBackground();
				return cellBackground.Value;
			}

			set
			{
				PrepareBackground();
				cellBackground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Background
		{
			get
			{
				PrepareBackground();
				return _Background_.Value;
			}

			set
			{
				PrepareBackground();
				_Background_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.Media.Brush> bridgeBackground;

		Cell<IProperty<object>> cellContent;

		public IProperty<object> _Content_
		{
			get
			{
				PrepareContent();
				return cellContent.Value;
			}

			set
			{
				PrepareContent();
				cellContent.Value = value;
			}
		}

		public new object Content
		{
			get
			{
				PrepareContent();
				return _Content_.Value;
			}

			set
			{
				PrepareContent();
				_Content_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, object> bridgeContent;

		Cell<IProperty<System.Windows.Media.FontFamily>> cellFontFamily;

		public IProperty<System.Windows.Media.FontFamily> _FontFamily_
		{
			get
			{
				PrepareFontFamily();
				return cellFontFamily.Value;
			}

			set
			{
				PrepareFontFamily();
				cellFontFamily.Value = value;
			}
		}

		public new System.Windows.Media.FontFamily FontFamily
		{
			get
			{
				PrepareFontFamily();
				return _FontFamily_.Value;
			}

			set
			{
				PrepareFontFamily();
				_FontFamily_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.Media.FontFamily> bridgeFontFamily;

		Cell<IProperty<double>> cellFontSize;

		public IProperty<double> _FontSize_
		{
			get
			{
				PrepareFontSize();
				return cellFontSize.Value;
			}

			set
			{
				PrepareFontSize();
				cellFontSize.Value = value;
			}
		}

		public new double FontSize
		{
			get
			{
				PrepareFontSize();
				return _FontSize_.Value;
			}

			set
			{
				PrepareFontSize();
				_FontSize_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, double> bridgeFontSize;

		Cell<IProperty<System.Windows.FontStretch>> cellFontStretch;

		public IProperty<System.Windows.FontStretch> _FontStretch_
		{
			get
			{
				PrepareFontStretch();
				return cellFontStretch.Value;
			}

			set
			{
				PrepareFontStretch();
				cellFontStretch.Value = value;
			}
		}

		public new System.Windows.FontStretch FontStretch
		{
			get
			{
				PrepareFontStretch();
				return _FontStretch_.Value;
			}

			set
			{
				PrepareFontStretch();
				_FontStretch_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.FontStretch> bridgeFontStretch;

		Cell<IProperty<System.Windows.FontStyle>> cellFontStyle;

		public IProperty<System.Windows.FontStyle> _FontStyle_
		{
			get
			{
				PrepareFontStyle();
				return cellFontStyle.Value;
			}

			set
			{
				PrepareFontStyle();
				cellFontStyle.Value = value;
			}
		}

		public new System.Windows.FontStyle FontStyle
		{
			get
			{
				PrepareFontStyle();
				return _FontStyle_.Value;
			}

			set
			{
				PrepareFontStyle();
				_FontStyle_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.FontStyle> bridgeFontStyle;

		Cell<IProperty<System.Windows.FontWeight>> cellFontWeight;

		public IProperty<System.Windows.FontWeight> _FontWeight_
		{
			get
			{
				PrepareFontWeight();
				return cellFontWeight.Value;
			}

			set
			{
				PrepareFontWeight();
				cellFontWeight.Value = value;
			}
		}

		public new System.Windows.FontWeight FontWeight
		{
			get
			{
				PrepareFontWeight();
				return _FontWeight_.Value;
			}

			set
			{
				PrepareFontWeight();
				_FontWeight_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.FontWeight> bridgeFontWeight;

		Cell<IProperty<System.Windows.Media.Brush>> cellForeground;

		public IProperty<System.Windows.Media.Brush> _Foreground_
		{
			get
			{
				PrepareForeground();
				return cellForeground.Value;
			}

			set
			{
				PrepareForeground();
				cellForeground.Value = value;
			}
		}

		public new System.Windows.Media.Brush Foreground
		{
			get
			{
				PrepareForeground();
				return _Foreground_.Value;
			}

			set
			{
				PrepareForeground();
				_Foreground_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.Media.Brush> bridgeForeground;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, string> bridgeName;

		Cell<IProperty<string>> cellTitle;

		public IProperty<string> _Title_
		{
			get
			{
				PrepareTitle();
				return cellTitle.Value;
			}

			set
			{
				PrepareTitle();
				cellTitle.Value = value;
			}
		}

		public new string Title
		{
			get
			{
				PrepareTitle();
				return _Title_.Value;
			}

			set
			{
				PrepareTitle();
				_Title_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, string> bridgeTitle;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<Window, double> bridgeWidth;

		Cell<IProperty<System.Windows.WindowStartupLocation>> cellWindowStartupLocation;

		public IProperty<System.Windows.WindowStartupLocation> _WindowStartupLocation_
		{
			get
			{
				PrepareWindowStartupLocation();
				return cellWindowStartupLocation.Value;
			}

			set
			{
				PrepareWindowStartupLocation();
				cellWindowStartupLocation.Value = value;
			}
		}

		public new System.Windows.WindowStartupLocation WindowStartupLocation
		{
			get
			{
				PrepareWindowStartupLocation();
				return _WindowStartupLocation_.Value;
			}

			set
			{
				PrepareWindowStartupLocation();
				_WindowStartupLocation_.Value = value;
			}
		}

		RegularPropertyBridge<Window, System.Windows.WindowStartupLocation> bridgeWindowStartupLocation;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareBackground()
		{
			if (bridgeBackground == null)
			{
				bridgeBackground = new DependencyPropertyBridge<Window, System.Windows.Media.Brush>(this, "Background");
				cellBackground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeBackground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeBackground.Activate();
				}
			}
		}

		void PrepareContent()
		{
			if (bridgeContent == null)
			{
				bridgeContent = new DependencyPropertyBridge<Window, object>(this, "Content");
				cellContent = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeContent.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeContent.Activate();
				}
			}
		}

		void PrepareFontFamily()
		{
			if (bridgeFontFamily == null)
			{
				bridgeFontFamily = new DependencyPropertyBridge<Window, System.Windows.Media.FontFamily>(this, "FontFamily");
				cellFontFamily = new Cell<IProperty<System.Windows.Media.FontFamily>>(
					new LazyCache<System.Windows.Media.FontFamily>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontFamily.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontFamily.Activate();
				}
			}
		}

		void PrepareFontSize()
		{
			if (bridgeFontSize == null)
			{
				bridgeFontSize = new DependencyPropertyBridge<Window, double>(this, "FontSize");
				cellFontSize = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontSize.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontSize.Activate();
				}
			}
		}

		void PrepareFontStretch()
		{
			if (bridgeFontStretch == null)
			{
				bridgeFontStretch = new DependencyPropertyBridge<Window, System.Windows.FontStretch>(this, "FontStretch");
				cellFontStretch = new Cell<IProperty<System.Windows.FontStretch>>(
					new LazyCache<System.Windows.FontStretch>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStretch.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStretch.Activate();
				}
			}
		}

		void PrepareFontStyle()
		{
			if (bridgeFontStyle == null)
			{
				bridgeFontStyle = new DependencyPropertyBridge<Window, System.Windows.FontStyle>(this, "FontStyle");
				cellFontStyle = new Cell<IProperty<System.Windows.FontStyle>>(
					new LazyCache<System.Windows.FontStyle>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontStyle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontStyle.Activate();
				}
			}
		}

		void PrepareFontWeight()
		{
			if (bridgeFontWeight == null)
			{
				bridgeFontWeight = new DependencyPropertyBridge<Window, System.Windows.FontWeight>(this, "FontWeight");
				cellFontWeight = new Cell<IProperty<System.Windows.FontWeight>>(
					new LazyCache<System.Windows.FontWeight>(() =>
					{
						using (new Snapshot())
						{
							return bridgeFontWeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeFontWeight.Activate();
				}
			}
		}

		void PrepareForeground()
		{
			if (bridgeForeground == null)
			{
				bridgeForeground = new DependencyPropertyBridge<Window, System.Windows.Media.Brush>(this, "Foreground");
				cellForeground = new Cell<IProperty<System.Windows.Media.Brush>>(
					new LazyCache<System.Windows.Media.Brush>(() =>
					{
						using (new Snapshot())
						{
							return bridgeForeground.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeForeground.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<Window, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<Window, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<Window, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<Window, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<Window, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareTitle()
		{
			if (bridgeTitle == null)
			{
				bridgeTitle = new DependencyPropertyBridge<Window, string>(this, "Title");
				cellTitle = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeTitle.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeTitle.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<Window, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<Window, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<Window, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		void PrepareWindowStartupLocation()
		{
			if (bridgeWindowStartupLocation == null)
			{
				bridgeWindowStartupLocation = new RegularPropertyBridge<Window, System.Windows.WindowStartupLocation>(this, "WindowStartupLocation");
				cellWindowStartupLocation = new Cell<IProperty<System.Windows.WindowStartupLocation>>(
					new LazyCache<System.Windows.WindowStartupLocation>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWindowStartupLocation.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWindowStartupLocation.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeBackground != null)
			{
				bridgeBackground.Activate();
			}
			if (bridgeContent != null)
			{
				bridgeContent.Activate();
			}
			if (bridgeFontFamily != null)
			{
				bridgeFontFamily.Activate();
			}
			if (bridgeFontSize != null)
			{
				bridgeFontSize.Activate();
			}
			if (bridgeFontStretch != null)
			{
				bridgeFontStretch.Activate();
			}
			if (bridgeFontStyle != null)
			{
				bridgeFontStyle.Activate();
			}
			if (bridgeFontWeight != null)
			{
				bridgeFontWeight.Activate();
			}
			if (bridgeForeground != null)
			{
				bridgeForeground.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeTitle != null)
			{
				bridgeTitle.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			if (bridgeWindowStartupLocation != null)
			{
				bridgeWindowStartupLocation.Activate();
			}
			initialized = true;
		}
	}

	public class WrapPanel : System.Windows.Controls.WrapPanel
	{
		bool initialized;

		Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>> cellChildren;

		public IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>> _Children_
		{
			get
			{
				PrepareChildren();
				return cellChildren.Value;
			}

			set
			{
				PrepareChildren();
				cellChildren.Value = value;
			}
		}

		public new System.Collections.Generic.IEnumerable<System.Windows.UIElement> Children
		{
			get
			{
				PrepareChildren();
				return _Children_.Value;
			}

			set
			{
				PrepareChildren();
				_Children_.Value = value;
			}
		}

		CollectionBridge<WrapPanel, System.Windows.UIElement> bridgeChildren;

		Cell<IProperty<double>> cellHeight;

		public IProperty<double> _Height_
		{
			get
			{
				PrepareHeight();
				return cellHeight.Value;
			}

			set
			{
				PrepareHeight();
				cellHeight.Value = value;
			}
		}

		public new double Height
		{
			get
			{
				PrepareHeight();
				return _Height_.Value;
			}

			set
			{
				PrepareHeight();
				_Height_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, double> bridgeHeight;

		Cell<IProperty<System.Windows.HorizontalAlignment>> cellHorizontalAlignment;

		public IProperty<System.Windows.HorizontalAlignment> _HorizontalAlignment_
		{
			get
			{
				PrepareHorizontalAlignment();
				return cellHorizontalAlignment.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				cellHorizontalAlignment.Value = value;
			}
		}

		public new System.Windows.HorizontalAlignment HorizontalAlignment
		{
			get
			{
				PrepareHorizontalAlignment();
				return _HorizontalAlignment_.Value;
			}

			set
			{
				PrepareHorizontalAlignment();
				_HorizontalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, System.Windows.HorizontalAlignment> bridgeHorizontalAlignment;

		Cell<IProperty<bool>> cellIsEnabled;

		public IProperty<bool> _IsEnabled_
		{
			get
			{
				PrepareIsEnabled();
				return cellIsEnabled.Value;
			}

			set
			{
				PrepareIsEnabled();
				cellIsEnabled.Value = value;
			}
		}

		public new bool IsEnabled
		{
			get
			{
				PrepareIsEnabled();
				return _IsEnabled_.Value;
			}

			set
			{
				PrepareIsEnabled();
				_IsEnabled_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, bool> bridgeIsEnabled;

		Cell<IProperty<System.Windows.Thickness>> cellMargin;

		public IProperty<System.Windows.Thickness> _Margin_
		{
			get
			{
				PrepareMargin();
				return cellMargin.Value;
			}

			set
			{
				PrepareMargin();
				cellMargin.Value = value;
			}
		}

		public new System.Windows.Thickness Margin
		{
			get
			{
				PrepareMargin();
				return _Margin_.Value;
			}

			set
			{
				PrepareMargin();
				_Margin_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, System.Windows.Thickness> bridgeMargin;

		Cell<IProperty<string>> cellName;

		public IProperty<string> _Name_
		{
			get
			{
				PrepareName();
				return cellName.Value;
			}

			set
			{
				PrepareName();
				cellName.Value = value;
			}
		}

		public new string Name
		{
			get
			{
				PrepareName();
				return _Name_.Value;
			}

			set
			{
				PrepareName();
				_Name_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, string> bridgeName;

		Cell<IProperty<System.Windows.Controls.Orientation>> cellOrientation;

		public IProperty<System.Windows.Controls.Orientation> _Orientation_
		{
			get
			{
				PrepareOrientation();
				return cellOrientation.Value;
			}

			set
			{
				PrepareOrientation();
				cellOrientation.Value = value;
			}
		}

		public new System.Windows.Controls.Orientation Orientation
		{
			get
			{
				PrepareOrientation();
				return _Orientation_.Value;
			}

			set
			{
				PrepareOrientation();
				_Orientation_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, System.Windows.Controls.Orientation> bridgeOrientation;

		Cell<IProperty<object>> cellToolTip;

		public IProperty<object> _ToolTip_
		{
			get
			{
				PrepareToolTip();
				return cellToolTip.Value;
			}

			set
			{
				PrepareToolTip();
				cellToolTip.Value = value;
			}
		}

		public new object ToolTip
		{
			get
			{
				PrepareToolTip();
				return _ToolTip_.Value;
			}

			set
			{
				PrepareToolTip();
				_ToolTip_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, object> bridgeToolTip;

		Cell<IProperty<System.Windows.VerticalAlignment>> cellVerticalAlignment;

		public IProperty<System.Windows.VerticalAlignment> _VerticalAlignment_
		{
			get
			{
				PrepareVerticalAlignment();
				return cellVerticalAlignment.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				cellVerticalAlignment.Value = value;
			}
		}

		public new System.Windows.VerticalAlignment VerticalAlignment
		{
			get
			{
				PrepareVerticalAlignment();
				return _VerticalAlignment_.Value;
			}

			set
			{
				PrepareVerticalAlignment();
				_VerticalAlignment_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, System.Windows.VerticalAlignment> bridgeVerticalAlignment;

		Cell<IProperty<double>> cellWidth;

		public IProperty<double> _Width_
		{
			get
			{
				PrepareWidth();
				return cellWidth.Value;
			}

			set
			{
				PrepareWidth();
				cellWidth.Value = value;
			}
		}

		public new double Width
		{
			get
			{
				PrepareWidth();
				return _Width_.Value;
			}

			set
			{
				PrepareWidth();
				_Width_.Value = value;
			}
		}

		DependencyPropertyBridge<WrapPanel, double> bridgeWidth;

		public System.Windows.Controls.Dock DockPanel_Dock
		{
			get
			{
				return System.Windows.Controls.DockPanel.GetDock(this);
			}

			set
			{
				System.Windows.Controls.DockPanel.SetDock(this, value);
			}
		}

		public int Grid_Row
		{
			get
			{
				return System.Windows.Controls.Grid.GetRow(this);
			}

			set
			{
				System.Windows.Controls.Grid.SetRow(this, value);
			}
		}


		void PrepareChildren()
		{
			if (bridgeChildren == null)
			{
				bridgeChildren = new CollectionBridge<WrapPanel, System.Windows.UIElement>(this, "Children");				
				cellChildren = new Cell<IProperty<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>>(
					new LazyCache<System.Collections.Generic.IEnumerable<System.Windows.UIElement>>(() =>
					{
						using (new Snapshot())
						{
							return bridgeChildren.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeChildren.Activate();
				}
			}
		}

		void PrepareHeight()
		{
			if (bridgeHeight == null)
			{
				bridgeHeight = new DependencyPropertyBridge<WrapPanel, double>(this, "Height");
				cellHeight = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHeight.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHeight.Activate();
				}
			}
		}

		void PrepareHorizontalAlignment()
		{
			if (bridgeHorizontalAlignment == null)
			{
				bridgeHorizontalAlignment = new DependencyPropertyBridge<WrapPanel, System.Windows.HorizontalAlignment>(this, "HorizontalAlignment");
				cellHorizontalAlignment = new Cell<IProperty<System.Windows.HorizontalAlignment>>(
					new LazyCache<System.Windows.HorizontalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeHorizontalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeHorizontalAlignment.Activate();
				}
			}
		}

		void PrepareIsEnabled()
		{
			if (bridgeIsEnabled == null)
			{
				bridgeIsEnabled = new DependencyPropertyBridge<WrapPanel, bool>(this, "IsEnabled");
				cellIsEnabled = new Cell<IProperty<bool>>(
					new LazyCache<bool>(() =>
					{
						using (new Snapshot())
						{
							return bridgeIsEnabled.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeIsEnabled.Activate();
				}
			}
		}

		void PrepareMargin()
		{
			if (bridgeMargin == null)
			{
				bridgeMargin = new DependencyPropertyBridge<WrapPanel, System.Windows.Thickness>(this, "Margin");
				cellMargin = new Cell<IProperty<System.Windows.Thickness>>(
					new LazyCache<System.Windows.Thickness>(() =>
					{
						using (new Snapshot())
						{
							return bridgeMargin.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeMargin.Activate();
				}
			}
		}

		void PrepareName()
		{
			if (bridgeName == null)
			{
				bridgeName = new DependencyPropertyBridge<WrapPanel, string>(this, "Name");
				cellName = new Cell<IProperty<string>>(
					new LazyCache<string>(() =>
					{
						using (new Snapshot())
						{
							return bridgeName.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeName.Activate();
				}
			}
		}

		void PrepareOrientation()
		{
			if (bridgeOrientation == null)
			{
				bridgeOrientation = new DependencyPropertyBridge<WrapPanel, System.Windows.Controls.Orientation>(this, "Orientation");
				cellOrientation = new Cell<IProperty<System.Windows.Controls.Orientation>>(
					new LazyCache<System.Windows.Controls.Orientation>(() =>
					{
						using (new Snapshot())
						{
							return bridgeOrientation.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeOrientation.Activate();
				}
			}
		}

		void PrepareToolTip()
		{
			if (bridgeToolTip == null)
			{
				bridgeToolTip = new DependencyPropertyBridge<WrapPanel, object>(this, "ToolTip");
				cellToolTip = new Cell<IProperty<object>>(
					new LazyCache<object>(() =>
					{
						using (new Snapshot())
						{
							return bridgeToolTip.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeToolTip.Activate();
				}
			}
		}

		void PrepareVerticalAlignment()
		{
			if (bridgeVerticalAlignment == null)
			{
				bridgeVerticalAlignment = new DependencyPropertyBridge<WrapPanel, System.Windows.VerticalAlignment>(this, "VerticalAlignment");
				cellVerticalAlignment = new Cell<IProperty<System.Windows.VerticalAlignment>>(
					new LazyCache<System.Windows.VerticalAlignment>(() =>
					{
						using (new Snapshot())
						{
							return bridgeVerticalAlignment.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeVerticalAlignment.Activate();
				}
			}
		}

		void PrepareWidth()
		{
			if (bridgeWidth == null)
			{
				bridgeWidth = new DependencyPropertyBridge<WrapPanel, double>(this, "Width");
				cellWidth = new Cell<IProperty<double>>(
					new LazyCache<double>(() =>
					{
						using (new Snapshot())
						{
							return bridgeWidth.InternalValue;
						}
					})
				);
				if (initialized)
				{
					bridgeWidth.Activate();
				}
			}
		}

		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			if (bridgeChildren != null)
			{
				bridgeChildren.Activate();
			}
			if (bridgeHeight != null)
			{
				bridgeHeight.Activate();
			}
			if (bridgeHorizontalAlignment != null)
			{
				bridgeHorizontalAlignment.Activate();
			}
			if (bridgeIsEnabled != null)
			{
				bridgeIsEnabled.Activate();
			}
			if (bridgeMargin != null)
			{
				bridgeMargin.Activate();
			}
			if (bridgeName != null)
			{
				bridgeName.Activate();
			}
			if (bridgeOrientation != null)
			{
				bridgeOrientation.Activate();
			}
			if (bridgeToolTip != null)
			{
				bridgeToolTip.Activate();
			}
			if (bridgeVerticalAlignment != null)
			{
				bridgeVerticalAlignment.Activate();
			}
			if (bridgeWidth != null)
			{
				bridgeWidth.Activate();
			}
			initialized = true;
		}
	}
}

